namespace = bride_show

scripted_trigger agrees_with_bride_show = {
	OR = {
		culture = { has_cultural_pillar = heritage_east_slavic }
		culture = { has_cultural_pillar = heritage_byzantine }
		accepts_concubinage = yes
		accepts_polygamy = yes
	}
}

scripted_trigger bride_show_viable_candidate_trigger = {
	is_healthy = yes
	is_married = no
	is_concubine = no
	is_imprisoned = no
	OR = {
		AND = {
			exists = court_owner
			court_owner = {
				NOT = {
					this = root
				}
			}
			court_owner.primary_title = {
				place_in_line_of_succession = {
					target = prev
					value >= 3
				}
			}
		}
		NOT = {
			any_heir_title = {} # Not heir to anything
		}
	}
	OR = {
		AND = { #If they aren't betrothed you can arrange a marriage with them
			age = 15
			exists = betrothed
			root = {
				is_ai = no
			}
		}
		age >= 16
	}
	age <= 22
	NOR = {
		AND = { #If you betrothed them already why should they participate?
			exists = betrothed
			betrothed = { is_close_family_of = root }
		}
		has_council_position = councillor_court_chaplain
		is_close_family_of = root
		has_trait = devoted
		has_trait = celibate
		has_trait = lunatic_1
		has_trait = lunatic_genetic
		has_trait = possessed_1
		has_trait = possessed_genetic
		has_trait = lisping
		has_trait = stuttering
		has_trait = scaly
		has_trait = clubfooted
		has_trait = hunchbacked
		has_trait = wheezing
		has_trait = spindly
		has_trait = beauty_bad_2
		has_trait = beauty_bad_3
		has_trait = intellect_bad_2
		has_trait = intellect_bad_3
		has_trait = one_eyed
		has_trait = one_legged
		has_trait = disfigured
		has_trait = eunuch
		has_trait = adulterer
		has_trait = fornicator
		has_trait = lustful
		has_trait = deviant
		has_trait = murderer
		has_trait = kinslayer_1
		has_trait = kinslayer_2
		has_trait = kinslayer_3
		has_trait = incestuous
		has_trait = excommunicated
		has_trait = drunkard
		has_trait = hashishiyah
		has_trait = wounded_1
		has_trait = wounded_2
		has_trait = wounded_3
		has_trait = sickly
		has_trait = infirm
		has_trait = incapable
		has_trait = inbred
		has_trait = maimed
		has_trait = blind
		has_trait = ill
		has_trait = bubonic_plague
		has_trait = cancer
		has_trait = consumption
		has_trait = gluttonous
		has_trait = great_pox
		has_trait = gout_ridden
		has_trait = leper
		has_trait = lovers_pox
		has_trait = pneumonic
		has_trait = smallpox
		has_trait = typhus
		has_trait = dwarf
		has_sexuality = bisexual
		has_sexuality = heterosexual
		sex_same_as = root
	}
}

scripted_trigger can_have_four_candidates_trigger = {
	OR = {
		highest_held_title_tier = tier_empire
		any_vassal = {
			count >= 9
		}
	}
}

scripted_effect bride_show_add_to_candidate_list_effect = {
	if = {
		limit = { bride_show_viable_candidate_trigger = yes }
		add_to_list = elegible_candidates
	}
}

scripted_effect bride_show_next_candidate_effect = {
	if = {
		limit = { #I can still pick dates
			OR = {
				NOT = {		
					exists = scope:candidate_3
				}
				AND = {	
					NOT = {		
						exists = scope:candidate_4
					}
					can_have_four_candidates_trigger = yes
				}
			}
		}
		#Characters will be created only if not at least 3 candidates
		if = {
			limit = { 
				OR = { 
					any_in_list = {
						list = elegible_candidates
						count = 0
					}
					any_in_list = { #Or in case all of them are children
						list = elegible_candidates
						is_adult = no
						count >= 3
					}
				}
			}
			if = {
				limit = { is_male = yes }
				create_character = {
					location = root.capital_province
					template = potential_bride_character
					gender = female
					save_scope_as = bride_1
				}
			}
			else_if = {
				limit = { is_female = yes }
				create_character = {
					location = root.capital_province
					template = potential_bride_character
					gender = male
					save_scope_as = bride_1
				}
			}
			scope:bride_1 = {
				add_to_list = elegible_candidates
				add_to_list = chosen_candidate_list
				add_character_flag = created_bride_flag
			}
			clear_saved_scope = bride_1
		}
		random_in_list = {
			list = elegible_candidates
			weight = {
				base = 5
				modifier = { #Non-rejected consorts are preferred
					NOR = {
						has_character_flag = flag_demoted_spouse
						has_character_flag = flag_demoted_grand_consort
						has_character_flag = flag_demoted_noble_consort
						has_character_flag = flag_demoted_noble_lady
						has_character_flag = flag_demoted_noble_attendant
						has_character_flag = flag_demoted_consort
						has_character_flag = flag_demoted_lady
						has_character_flag = flag_demoted_attendant
						has_character_modifier = demoted_spouse_modifier
						has_character_modifier = demoted_primary_spouse_modifier
					}
					add = 40
				}
				modifier = { #Ready to be consorts are preferred
					is_adult = yes
					add = 25
				}
				modifier = { #Non-courtiers are preferred
					NOT = { is_courtier_of = root }
					add = 100
				}
				modifier = { #Powerful candidates are preferred
					is_lowborn = no
					add = 10
				}
				modifier = { #Child of vassals are preferred
					any_close_or_extended_family_member = {
						is_vassal_of = root
					}
					add = 200
				}
				modifier = { #Child of powerful vassals are preferred
					any_close_family_member = {
						OR = {
							is_powerful_vassal_of = root
							is_councillor_of = root
							is_parent_of = root
						}
					}
					add = 100
				}
				modifier = { #Noble rank
					any_close_family_member = {
						highest_held_title_tier >= tier_barony
					}
					add = 5
				}
				modifier = { #Noble rank
					any_close_family_member = {
						highest_held_title_tier >= tier_county
					}
					add = 10
				}
				modifier = { #Ducal rank
					any_close_family_member = {
						highest_held_title_tier >= tier_duchy
					}
					add = 15
				}
				modifier = { #Royal rank
					any_close_family_member = {
						highest_held_title_tier >= tier_kingdom
					}
					add = 10
				}
				modifier = { #Imperial rank
					any_close_family_member = {
						highest_held_title_tier = tier_empire
					}
					add = 5
				}
				modifier = { #Nepotism wins
					any_close_or_extended_family_member = {
						is_close_or_extended_family_of = root
					}
					add = 10
				}
				modifier = { #Trait considerations
					OR = {
						has_trait = beauty_good_1
						has_trait = intellect_good_1
						has_trait = physique_good_1
					}
					add = 5
				}
				modifier = { #Trait considerations
					OR = {
						has_trait = beauty_good_2
						has_trait = intellect_good_2
						has_trait = physique_good_2
					}
					add = 10
				}
				modifier = { #Trait considerations
					OR = {
						has_trait = beauty_good_3
						has_trait = intellect_good_3
						has_trait = physique_good_3
					}
					add = 15
				}
				modifier = { #Virtuous traits are encouraged
					AND = {
						num_sinful_traits = 0
						num_virtuous_traits >= 1
					}
					add = 10
				}
				modifier = { #Skill considerations
					OR = {
						stewardship >= 9
						diplomacy >= 9
						learning >= 9
					}
					add = 5
				}
				modifier = { #Skill considerations
					OR = {
						stewardship >= 13
						diplomacy >= 13
						learning >= 13
					}
					add = 10
				}
				modifier = { #Skill considerations
					OR = {
						stewardship >= 17
						diplomacy >= 17
						learning >= 17
					}
					add = 15
				}
				modifier = { #Parents would leave their children
					any_child = {
						even_if_dead = yes
						count = 0
					}
					add = 900
				}
				modifier = { #Virginity is valuable
					any_spouse = {
						even_if_dead = yes
						count = 0
					}
					add = 900
				}
				modifier = { #Characters that believe in concubinage are more elegible
					AND = {
						root = {
							OR = {
								faith = { has_doctrine_parameter = allows_concubinage }
								faith = { has_doctrine_parameter = allows_polygamy }
								culture = { has_cultural_parameter = allows_polygamy }
								culture = { has_cultural_parameter = allows_concubinage }
							}
						}
						OR = {
							faith = { has_doctrine_parameter = allows_concubinage }
							faith = { has_doctrine_parameter = allows_polygamy }
							culture = { has_cultural_parameter = allows_polygamy }
							culture = { has_cultural_parameter = allows_concubinage }
						}
					}
					add = 20
				}
			}
			save_scope_as = potential_candidate
		}
	}

	#Are we done? Yes
	if = {
		limit = {
			OR = {
				AND = {	
					exists = scope:candidate_3
					can_have_four_candidates_trigger = no
				}
				exists = scope:candidate_4
			}
		}
		trigger_event = bride_show.0003
	}
	#No
	else = {
		trigger_event = bride_show.0002
	}
}

bride_show.0001 = { 
	type = character_event
	title = bride_show.0001.t
	desc = bride_show.0001.desc
	theme = realm
	
	right_portrait = { 	
		character = root
		animation = personality_rational
	}
	
	# Let's go!
	option = {
		name = bride_show.0001.a
		custom_tooltip = bride_show.0001.a.tt
		
		hidden_effect = {
			#Set up lists
			every_vassal = {
				limit = { 
					is_ai = yes 
					NOR = { 
						government_has_flag = government_is_theocracy
						is_at_war_with = root
					}
				}
				every_courtier = {
					bride_show_add_to_candidate_list_effect = yes
				}
			}
			#Let's go!
			bride_show_next_candidate_effect = yes 
		}
		ai_chance = {
			base = 15
		}
	}
}

scripted_effect bride_show_break_betrothal_candidate_effect = {
	if = {
		limit = { exists = betrothed }
		root = { save_scope_as = actor }
		save_scope_as = rejecting_betrothed
		betrothed = {
			save_scope_as = recipient
			scope:recipient = { save_scope_as = rejected_betrothed }
			trigger_event = marriage_interaction.0020
			add_opinion = {
				target = root
				modifier = broke_betrothal_opinion
			}
			every_close_or_extended_family_member = {
				limit = {
					NOR = {
						this = root 
						is_close_or_extended_family_of = root
					}
				}
				custom = all_family_members
				add_opinion = {
					target = root
					modifier = broke_betrothal_opinion
				}
			}
			clear_saved_scope = recipient
		}
		break_betrothal = betrothed
		if = { #Ambitious candidates see this as an opportunity to climb up
			limit = {
				AND = {
					agrees_with_bride_show = yes
					OR = {
						has_trait = greedy
						has_trait = arrogant
						has_trait = ambitious
					}
				}
			}
		}
		else = {
			add_opinion = {
				target = root
				modifier = broke_betrothal_opinion
			}
		}
		every_close_or_extended_family_member = {
			limit = {
				NOR = {
					this = root 
					is_close_or_extended_family_of = root
					AND	= {
						agrees_with_bride_show = yes
						is_vassal_of = root
						has_vassal_stance = courtly
					}
				}
			}
			custom = all_family_members
			add_opinion = {
				target = root
				modifier = broke_betrothal_opinion
			}
		}
	}
}

#List and scopes
scripted_effect bride_show_saved_candidate_effect = {
	remove_from_list = elegible_candidates
	if = {
		limit = { NOT = { exists = scope:candidate_1 } }
		save_scope_as = candidate_1
	}
	else_if = {
		limit = { NOT = { exists = scope:candidate_2 } }
		save_scope_as = candidate_2
	}
	else_if = {
		limit = { NOT = { exists = scope:candidate_3 } }
		save_scope_as = candidate_3
	}
	else = {
		save_scope_as = candidate_4
	}
}

#Pick your portraits
bride_show.0002 = {
	type = character_event
	title = bride_show.0001.t
	desc = {
		first_valid = { #Intro
			triggered_desc = {
				trigger = {
					OR = {	
						exists = scope:candidate_3
						AND = {
							exists = scope:candidate_2
							can_have_four_candidates_trigger = no
						}
					}
				}
				desc = bride_show.0002.start_3.desc
			}
			triggered_desc = {
				trigger = {
					OR = {	
						exists = scope:candidate_1
						AND = {
							exists = scope:candidate_2
							can_have_four_candidates_trigger = yes
						}
					}
				}
				desc = bride_show.0002.start_2.desc
			}
			triggered_desc = {
				desc = bride_show.0002.start.desc
			}
		}
		first_valid = { #Traits
			triggered_desc = {
				trigger = { #2 #4
					OR = {
						AND = {	
							exists = scope:candidate_1
							NOT = {
								exists = scope:candidate_2
							}
						}
						AND = {
							exists = scope:candidate_3
							NOT = {
								exists = scope:candidate_4
							}
						}
					}
					scope:potential_candidate = {
						AND = {
							OR = {
								has_trait = shy
								has_trait = paranoid
								has_trait = craven
							}
							NOR = {
								has_trait = ambitious
								has_trait = brave
								has_trait = arrogant
							}
						}
					}
				}
				desc = bride_show.0002.shy_2.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						AND = {
							OR = {
								has_trait = shy
								has_trait = paranoid
								has_trait = craven
							}
							NOR = {
								has_trait = ambitious
								has_trait = brave
								has_trait = arrogant
							}
						}
					}
				}
				desc = bride_show.0002.shy.desc
			}
			triggered_desc = {
				trigger = { #2 #4
					OR = {
						AND = {	
							exists = scope:candidate_1
							NOT = {
								exists = scope:candidate_2
							}
						}
						AND = {
							exists = scope:candidate_3
							NOT = {
								exists = scope:candidate_4
							}
						}
					}
					scope:potential_candidate = {
						AND = {
							OR = {
								has_trait = brave
								has_trait = ambitious
							}
							NOR = {
								has_trait = craven
								has_trait = paranoid
								has_trait = shy
								has_trait = arrogant
							}
						}
					}
				}
				desc = bride_show.0002.brave_2.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						AND = {
							OR = {
								has_trait = brave
								has_trait = ambitious
							}
							NOR = {
								has_trait = craven
								has_trait = paranoid
								has_trait = shy
								has_trait = arrogant
							}
						}
					}
				}
				desc = bride_show.0002.brave.desc
			}
			triggered_desc = {
				trigger = { #2 #4
					OR = {
						AND = {	
							exists = scope:candidate_1
							NOT = {
								exists = scope:candidate_2
							}
						}
						AND = {
							exists = scope:candidate_3
							NOT = {
								exists = scope:candidate_4
							}
						}
					}
					scope:potential_candidate = {
						AND = {
							OR = {
								has_trait = arrogant
							}
							NOR = {
								has_trait = craven
								has_trait = paranoid
								has_trait = shy
								has_trait = brave
								has_trait = ambitious
							}
						}
					}
				}
				desc = bride_show.0002.arrogant_2.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						AND = {
							OR = {
								has_trait = arrogant
							}
							NOR = {
								has_trait = craven
								has_trait = paranoid
								has_trait = shy
								has_trait = brave
								has_trait = ambitious
							}
						}
					}
				}
				desc = bride_show.0002.arrogant.desc
			}
			triggered_desc = {
				trigger = { #2 #4
					OR = {
						AND = {	
							exists = scope:candidate_1
							NOT = {
								exists = scope:candidate_2
							}
						}
						AND = {
							exists = scope:candidate_3
							NOT = {
								exists = scope:candidate_4
							}
						}
					}
				}
				desc = bride_show.0002.generic_1_2.desc
			}
			triggered_desc = {
				desc = bride_show.0002.generic_1.desc
			}
		}
		first_valid = { #Beauty
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						has_trait = beauty_good_3
					}
				}
				desc = bride_show.0002.beautiful.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						has_trait = beauty_good_2
					}
				}
				desc = bride_show.0002.handsome.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						has_trait = beauty_good_1
					}
				}
				desc = bride_show.0002.comely.desc
			}
			triggered_desc = {
				desc = bride_show.0002.generic_2.desc
			}
		}
		first_valid = { #Intellect
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						has_trait = intellect_good_3
					}
				}
				desc = bride_show.0002.genius.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						has_trait = intellect_good_2
					}
				}
				desc = bride_show.0002.intelligent.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						has_trait = intellect_good_1
					}
				}
				desc = bride_show.0002.quick.desc
			}
			triggered_desc = {
				desc = bride_show.0002.generic_3.desc
			}
		}
		first_valid = { #Skills
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						AND = {
							diplomacy <= 11
							learning <= 11
							stewardship >= 12
						}
					}
				}
				desc = bride_show.0002.stewardship.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						AND = {
							diplomacy <= 11
							learning >= 12
							stewardship <= 11
						}
					}
				}
				desc = bride_show.0002.learning.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						AND = {
							diplomacy >= 12
							learning <= 11
							stewardship <= 11
						}
					}
				}
				desc = bride_show.0002.diplomacy.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						OR = {
							AND = {
								stewardship >= 12
								learning >= 12
							}
							AND = {
								stewardship >= 12
								diplomacy >= 12
							}
							AND = {
								learning >= 12
								diplomacy >= 12
							}
						}
					}
				}
				desc = bride_show.0002.multiple.desc
			}
			triggered_desc = {
				desc = bride_show.0002.generic_4.desc
			}
		}
		desc = bride_show.0002.end.desc
	}
	theme = realm
	
	left_portrait = {
		character = scope:potential_candidate
		animation = flirtation
	}	

	immediate = {
		save_scope_as = liege
	}
	
	# Marry them
	option = {
		name = bride_show.0002.a
		trigger = {
			allowed_more_spouses = yes
			scope:potential_candidate = {
				age >= 16
			}
			age >= 16
			gold >= bride_compensation_payment_value
		}
		show_as_unavailable = { NOT = { gold >= bride_compensation_payment_value } }
		flavor = { #To get warning if you don't have enough money
			triggered_desc = {
				trigger = {
					NOT = { gold >= bride_compensation_payment_value }
				}
				desc = holy_order.0202.a._not.tt
			}
		}
		
		#Reward
		if = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			pay_short_term_gold = {
				target = scope:potential_candidate.court_owner
				gold = bride_compensation_payment_value
			}
			#Prestige
			if = {
				limit = {
					highest_held_title_tier = tier_duchy
				}
				scope:potential_candidate.court_owner = {
					add_prestige = miniscule_prestige_value
				}
			}
			else_if = {
				limit = {
					highest_held_title_tier = tier_kingdom
				}
				scope:potential_candidate.court_owner = {
					add_prestige = minor_prestige_value
				}
			}
			else_if = {
				limit = {
					highest_held_title_tier = tier_empire
				}
				scope:potential_candidate.court_owner = {
					add_prestige = medium_prestige_value
				}
			}
			scope:potential_candidate = {
				save_scope_as = candidate_marriage
				court_owner = {
					if = {
						limit = {
							any_close_family_member = {
								this = scope:candidate_marriage
							}
						}
						trigger_event = bride_show.0005
					}
					else = {
						hidden_effect = {
							send_interface_toast = {
								type = event_generic_neutral
								title = chosen_consort_t
								right_icon = scope:liege
								left_icon = scope:potential_candidate
								custom_tooltip = chosen_spouse_d
								
								show_as_tooltip = {
									scope:liege = { 
										pay_short_term_gold = {
											target = scope:potential_candidate.court_owner
											gold = bride_compensation_payment_value
										}
									}
								}
							}
						}
					}
				}
			}
			
			#Courtly vassals get a positive opinion
			if = {
				limit = {
					scope:potential_candidate.court_owner = {
						is_vassal_of = root
						has_vassal_stance = courtly
						any_close_family_member = {
							this = scope:potential_candidate
						}
						agrees_with_bride_show = yes
					}
				}
				scope:potential_candidate.court_owner = {
					add_opinion = {
						target = root
						modifier = courtly_vassal_marriage_opinion
					}
				}
			}
		}
		else = {
			pay_short_term_gold = {
				target = scope:potential_candidate
				gold = bride_compensation_payment_value
			}
			if = {
				limit = {
					highest_held_title_tier = tier_duchy
				}
				scope:potential_candidate = {
					add_prestige = miniscule_prestige_value
				}
			}
			else_if = {
				limit = {
					highest_held_title_tier = tier_kingdom
				}
				scope:potential_candidate = {
					add_prestige = minor_prestige_value
				}
			}
			else_if = {
				limit = {
					highest_held_title_tier = tier_empire
				}
				scope:potential_candidate = {
					add_prestige = medium_prestige_value
				}
			}
		}
		
		stress_impact = {
			paranoid = minor_stress_impact_gain
		}
		
		scope:potential_candidate = {
			bride_show_saved_candidate_effect = yes
			bride_show_break_betrothal_candidate_effect = yes
			hidden_effect = {
				if = {
					limit = {
						is_hostage = yes
					}
					return_hostage = yes
				}
			}
			save_scope_as = secondary_recipient
		}
		if = {
			limit = {
				is_female = yes
			}
			marry_matrilineal = scope:potential_candidate
		}
		else = {
			marry = scope:potential_candidate
		}
		
		#Marriage effects
		save_scope_as = actor
		save_scope_as = recipient
		save_scope_as = secondary_actor
		calyver_marriage_interaction_on_accept_effect = yes
		
		ai_chance = {
			base = 5
			modifier = { #Weigh down for stress
				add = -30
				OR = {
					has_trait = paranoid
					has_trait = craven
					has_trait = shy
					has_trait = chaste
					has_trait = celibate
				}
			}
			modifier = { #More likely if concubinage isn't accepted
				add = 40
				allowed_concubines = no
			}
			modifier = { #More likely if the candidate is noble
				add = 10
				scope:potential_candidate = {
					is_lowborn = no
				}
			}
			modifier = { #More likely if the shares same faith
				scope:potential_candidate.faith = root.faith
				add = 10
			}
			modifier = { #More likely if the shares same culture
				scope:potential_candidate.culture = root.culture
				add = 10
			}
			modifier = { #More likely if the candidate is the child of a vassal
				add = 50
				scope:potential_candidate = {
					any_close_family_member = { is_vassal_of = root }
				}
			}
			modifier = { #More likely if the candidate is the child of a powerful vassal
				add = 100
				scope:potential_candidate = {
					any_close_family_member = { 
						OR = {
							is_powerful_vassal_of = root
							is_councillor_of = root
						}
					}
				}
			}
			modifier = { #More likely if the candidate doesn't have the trait child of a concubine
				add = 10
				scope:potential_candidate = {
					NOR = {
						has_trait = child_of_concubine_female
						has_trait = child_of_concubine_male
						has_trait = wild_oat
						has_trait = bastard
					}
				}
			}
			modifier = { #More likely if root isn't married
				add = 15
				any_spouse = {
					count = 0
				}
			}
			modifier = { #More likely if the candidate has nice traits
				add = 5
				scope:potential_candidate = {
					OR = {
						has_trait = beauty_good_1
						has_trait = physique_good_1
						has_trait = intellect_good_1
					}
				}
			}
			modifier = { #More likely if the candidate has good traits
				add = 10
				scope:potential_candidate = {
					OR = {
						has_trait = beauty_good_2
						has_trait = physique_good_2
						has_trait = intellect_good_2
					}
				}
			}
			modifier = { #More likely if the candidate has excellent traits
				add = 15
				scope:potential_candidate = {
					OR = {
						has_trait = beauty_good_3
						has_trait = physique_good_3
						has_trait = intellect_good_3
					}
				}
			}
			modifier = { #More likely if the candidate is virtuous
				add = 5
				scope:potential_candidate = {
					OR = {
						num_sinful_traits = 0
						num_virtuous_traits >= 1
					}
				}
			}
			modifier = { #More likely if the candidate isn't a criminal
				add = 5
				NOT = { has_imprisonment_reason = scope:potential_candidate }
			}
			modifier = { #More likely if root doesn't have kids
				add = 5
				any_child = {
					even_if_dead = no
					count = 0
				}
			}
			modifier = { #More likely if candidate has good skills
				add = 10
				scope:potential_candidate = {
					OR = { 
						stewardship >= 9
						learning >= 9
					}
				}
			}
			modifier = { #More likely if candidate has good skills
				add = 5
				scope:potential_candidate = {
					OR = { 
						stewardship >= 13
						learning >= 13
					}
				}
			}
			modifier = { #More likely if candidate has good skills
				add = 5
				scope:potential_candidate = {
					OR = { 
						stewardship >= 17
						learning >= 17
					}
				}
			}
			compatibility_modifier = { #Trait compatibility
				who = root
				compatibility_target = scope:potential_candidate
				min = -40
				max = 40
				multiplier = 2
			}
		}
		trigger_event = bride_show.0006
	}

	#Make them my concubine
	option = {
		name = bride_show.0002.b
		trigger = {
			allowed_concubines = yes
			allowed_more_concubines = yes
			scope:potential_candidate = {
				age >= 16
				OR = {
					AND = {
						exists = court_owner
						court_owner.primary_title = {
							place_in_line_of_succession = {
								target = scope:potential_candidate
								value >= 3
							}
						}
					}
					NOT = {
						any_heir_title = {} # Not heir to anything
					}
				}
			}
			age >= 16
			gold >= bride_compensation_payment_value
		}
		show_as_unavailable = { NOT = { gold >= bride_compensation_payment_value } }
		flavor = { #To get warning if you don't have enough money
			triggered_desc = {
				trigger = {
					NOT = { gold >= bride_compensation_payment_value }
				}
				desc = holy_order.0202.a._not.tt
			}
		}
		
		#Reward
		if = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			pay_short_term_gold = {
				target = scope:potential_candidate.court_owner
				gold = bride_compensation_payment_value
			}
			#Prestige
			if = {
				limit = {
					highest_held_title_tier = tier_kingdom
				}
				scope:potential_candidate.court_owner = {
					add_prestige = miniscule_prestige_value
				}
			}
			else_if = {
				limit = {
					highest_held_title_tier = tier_empire
				}
				scope:potential_candidate.court_owner = {
					add_prestige = minor_prestige_value
				}
			}
			scope:potential_candidate = {
				save_scope_as = candidate_concubinage
				court_owner = {
					if = {
						limit = {
							any_close_family_member = {
								this = scope:candidate_concubinage
							}
						}
						trigger_event = bride_show.0005
					}
					else = {
						hidden_effect = {
							send_interface_toast = {
								type = event_generic_neutral
								title = chosen_consort_t
								right_icon = scope:liege
								left_icon = scope:potential_candidate
								custom_tooltip = chosen_concubine_d
								
								show_as_tooltip = {
									scope:liege = { 
										pay_short_term_gold = {
											target = scope:potential_candidate.court_owner
											gold = bride_compensation_payment_value
										}
									}
								}
							}
						}
					}
				}
			}
			
			#Courtly vassals get a positive opinion
			if = {
				limit = {
					scope:potential_candidate.court_owner = {
						is_vassal_of = root
						has_vassal_stance = courtly
						any_close_family_member = {
							this = scope:potential_candidate
						}
						agrees_with_bride_show = yes
					}
				}
				scope:potential_candidate.court_owner = {
					add_opinion = {
						target = root
						modifier = courtly_vassal_marriage_opinion
					}
				}
			}
		}
		else = {
			pay_short_term_gold = {
				target = scope:potential_candidate
				gold = bride_compensation_payment_value
			}
			if = {
				limit = {
					highest_held_title_tier = tier_kingdom
				}
				scope:potential_candidate = {
					add_prestige = miniscule_prestige_value
				}
			}
			else_if = {
				limit = {
					highest_held_title_tier = tier_empire
				}
				scope:potential_candidate = {
					add_prestige = minor_prestige_value
				}
			}
		}
		
		stress_impact = {
			paranoid = minor_stress_impact_gain
		}
		
		scope:potential_candidate = {
			bride_show_saved_candidate_effect = yes
			bride_show_break_betrothal_candidate_effect = yes
			hidden_effect = {
				if = {
					limit = {
						is_hostage = yes
					}
					return_hostage = yes
				}
			}
			save_scope_as = recipient
			save_scope_as = secondary_recipient
		}
		save_scope_as = actor
		save_scope_as = secondary_actor
		
		#Concubinage effects
		calyver_concubine_on_accept_effect = yes
		make_concubine = scope:recipient
		
		ai_chance = {
			base = 45
			modifier = { #Weigh down for stress
				add = -30
				OR = {
					has_trait = paranoid
					has_trait = craven
					has_trait = shy
					has_trait = celibate
					has_trait = chaste
				}
			}
			modifier = { #More likely if the candidate is noble
				add = 20
				scope:potential_candidate = {
					is_lowborn = yes
				}
			}
			modifier = { #More likely if the candidate is the child of a vassal
				add = 10
				scope:potential_candidate = {
					any_close_family_member = { is_vassal_of = root }
				}
			}
			modifier = { #More likely if root doesn't have desired concubines
				add = 30
				number_of_concubines < number_of_desired_concubines
			}
			modifier = { #More likely if the number of concubines is inferior to the number of spouses
				add = 60
				root = {
					is_married = yes
				}
				any_spouse = {
					even_if_dead = no
					count < number_of_concubines
				}
			}
			modifier = { #More likely if the candidate has nice traits
				add = 15
				scope:potential_candidate = {
					has_trait = beauty_good_1
				}
			}
			modifier = { #More likely if the candidate has good traits
				add = 20
				scope:potential_candidate = {
					has_trait = beauty_good_2
				}
			}
			modifier = { #More likely if the candidate has excellent traits
				add = 25
				scope:potential_candidate = {
					OR = {
						has_trait = beauty_good_3
						has_trait = fecund
					}
				}
			}
			modifier = { #More likely if root is lustful
				add = 20
				has_trait = lustful
			}
			modifier = { #More likely if root doesn't have kids
				add = 20
				any_child = {
					even_if_dead = no
					count = 0
				}
			}
			modifier = { #More likely if candidate has good skills
				add = 15
				scope:potential_candidate = {
					OR = {
						learning >= 9
						diplomacy >= 9
					}
				}
			}
			modifier = { #More likely if candidate has good skills
				add = 5
				scope:potential_candidate = {
					OR = {
						learning >= 13
						diplomacy >= 13
					}
				}
			}
			modifier = { #More likely if candidate has good skills
				add = 5
				scope:potential_candidate = {
					OR = {
						learning >= 17
						diplomacy >= 17
					}
				}
			}
			compatibility_modifier = { #Trait compatibility
				who = root
				compatibility_target = scope:potential_candidate
				min = -50
				max = 50
				multiplier = 2
			}
			modifier = { #Less likely if they could inherit a title
				add = -100
				scope:potential_candidate = {
					OR = {
						AND = {
							is_female = yes
							any_parent = {
								AND = {
									is_landed = yes
									OR = {
										has_realm_law = female_only_law
										has_realm_law = female_preference_law
									}
								}
							}
						}
						AND = {
							is_female = no
							any_parent = {
								AND = {
									is_landed = yes
									OR = {
										has_realm_law = male_only_law
										has_realm_law = male_preference_law
									}
								}
							}
						}
					}
				}
			}
		}
		trigger_event = bride_show.0007
	}

	#Recruit to court
	option = { # Recruit to court and break betrothal
		name = bride_show.0002.c
		if = {
			limit = { #PS
				scope:potential_candidate = {
					exists = betrothed
				}
			}
			custom_tooltip = bride_show.0002.c.tt
		}
		trigger = {
			scope:potential_candidate = {
				age >= 16
				OR = {
					AND = { #If they're close to inherit they must be betrothed. Otherwise a marriage can still be arranged
						exists = betrothed
						exists = court_owner
						court_owner.primary_title = {
							place_in_line_of_succession = {
								target = scope:potential_candidate
								value <= 2
							}
						}
					}
					AND = {
						exists = court_owner
						court_owner.primary_title = {
							place_in_line_of_succession = {
								target = scope:potential_candidate
								value >= 3
							}
						}
					}
					NOT = {
						any_heir_title = {} # Not heir to anything
					}
				}
			}
			gold >= bride_compensation_payment_value
		}
		show_as_unavailable = { NOT = { gold >= bride_compensation_payment_value } }
		flavor = { #To get warning if you don't have enough money
			triggered_desc = {
				trigger = {
					NOT = { gold >= bride_compensation_payment_value }
				}
				desc = holy_order.0202.a._not.tt
			}
		}
		
		#Reward
		if = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			pay_short_term_gold = {
				target = scope:potential_candidate.court_owner
				gold = bride_compensation_payment_value
			}
			scope:potential_candidate = {
				save_scope_as = candidate_courtier
				court_owner = {
					if = {
						limit = {
							any_close_family_member = {
								this = scope:candidate_courtier
							}
						}
						trigger_event = bride_show.0005
					}
					else = {
						hidden_effect = {
							send_interface_toast = {
								type = event_generic_neutral
								title = chosen_candidate_t
								right_icon = scope:liege
								left_icon = scope:potential_candidate
								custom_tooltip = chosen_courtier_d
								
								show_as_tooltip = {
									scope:liege = { 
										pay_short_term_gold = {
											target = scope:potential_candidate.court_owner
											gold = bride_compensation_payment_value
										}
									}
								}
							}
						}
					}
				}
			}
			if = {
				limit = {
					scope:potential_candidate.court_owner = {
						AND = {
							is_vassal_of = root
							has_vassal_stance = courtly
							any_close_family_member = {
								this = scope:potential_candidate
							}
							agrees_with_bride_show = yes
						}
					}
				}
				scope:potential_candidate.court_owner = {
					add_prestige = miniscule_prestige_value
				}
			}
		}
		else = {
			pay_short_term_gold = {
				target = scope:potential_candidate
				gold = bride_compensation_payment_value
			}
			scope:potential_candidate = {
				add_prestige = miniscule_prestige_value
			}
		}
		
		stress_impact = {
			paranoid = minor_stress_impact_gain
		}
		
		scope:potential_candidate = {
			bride_show_saved_candidate_effect = yes
			bride_show_break_betrothal_candidate_effect = yes
		}
		if = {
			limit = {
				scope:potential_candidate = {
					OR = {
						NOt = { 
							any_heir_title = {} # Not heir to anything
						}
						AND = {
							exists = court_owner
							court_owner.primary_title = {
								place_in_line_of_succession = {
									target = scope:potential_candidate
									value >= 3
								}
							}
						}
					}
				}
			}
			hidden_effect = {
				if = {
					limit = {
						scope:potential_candidate = {
							is_hostage = yes
						}
					}
					scope:potential_candidate = {
						return_hostage = yes
					}
				}
			}
			add_courtier = scope:potential_candidate
		}
		
		ai_chance = {
			base = 0
		}
	}

	#Break betrothal for kids
	option = { # I've got plans for you
		name = bride_show.0002.d
		trigger = {
			scope:potential_candidate = {
				age <= 15
			}
			gold >= bride_compensation_payment_value
		}
		show_as_unavailable = { NOT = { gold >= bride_compensation_payment_value } }
		flavor = { #To get warning if you don't have enough money
			triggered_desc = {
				trigger = {
					NOT = { gold >= bride_compensation_payment_value }
				}
				desc = holy_order.0202.a._not.tt
			}
		}
		
		#Reward
		if = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			pay_short_term_gold = {
				target = scope:potential_candidate.court_owner
				gold = bride_compensation_payment_value
			}
			scope:potential_candidate.court_owner = {
				if = {
					limit = {
						any_close_family_member = {
							this = scope:potential_candidate
						}
					}
					trigger_event = bride_show.0005
				}
				else = {
					hidden_effect = {
						send_interface_toast = {
							type = event_generic_neutral
							title = chosen_candidate_t
							right_icon = scope:liege
							left_icon = scope:potential_candidate
							custom_tooltip = broken_betrothal_d
							
							show_as_tooltip = {
								scope:liege = { 
									pay_short_term_gold = {
										target = scope:potential_candidate.court_owner
										gold = bride_compensation_payment_value
									}
								}
							}
						}
					}
				}
			}
			if = {
				limit = {
					scope:potential_candidate.court_owner = {
						AND = {
							is_vassal_of = root
							has_vassal_stance = courtly
							any_close_family_member = {
								this = scope:potential_candidate
							}
							agrees_with_bride_show = yes
						}
					}
				}
				scope:potential_candidate.court_owner = {
					add_prestige = miniscule_prestige_value
				}
			}
		}
		else = {
			pay_short_term_gold = {
				target = scope:potential_candidate
				gold = bride_compensation_payment_value
			}
			scope:potential_candidate = {
				add_prestige = miniscule_prestige_value
			}
		}
		
		scope:potential_candidate = {
			bride_show_saved_candidate_effect = yes
			bride_show_break_betrothal_candidate_effect = yes
		}
		
		ai_chance = {
			base = 0
		}
	}

	# Pass
	option = {
		name = bride_show.0002.e
		if = {
			limit = { 
				OR = {
					AND = {	
						exists = scope:candidate_2 
						can_have_four_candidates_trigger = no
					}
					exists = scope:candidate_3
				}
			}
			custom_tooltip = bride_show.0002.e_last.tt
		}
		else  = {
			custom_tooltip = bride_show.0002.e.tt
		}
		
		if = {
			limit = {
				exists = scope:potential_candidate.court_owner
				scope:potential_candidate.court_owner = {
					AND = {
						is_vassal_of = root
						has_vassal_stance = courtly
						any_close_family_member = {
							this = scope:potential_candidate
						}
						agrees_with_bride_show = yes
					}
				}
			}
			scope:potential_candidate.court_owner = {
				add_opinion = {
					target = root
					modifier = courtly_vassal_rejected_opinion
				}
			}
		}
		
		scope:potential_candidate = {
			bride_show_saved_candidate_effect = yes
			add_character_flag = {
				flag = rejected_candidate_flag
				days = 5
			}
			if = {
				limit = {
					AND = {
						NOR = {
							has_trait = paranoid
							has_trait = craven
							has_trait = shy
							has_trait = chaste
							has_trait = celibate
						}
						is_betrothed = no
						agrees_with_bride_show = yes
					}
				}
				add_opinion = {
					target = root
					modifier = rejected_me_opinion
				}
			}
			else_if = {
				limit = {
					AND = {
						OR = {
							has_trait = arrogant
							has_trait = greedy
							has_trait = ambitious
						}
						agrees_with_bride_show = yes
					}
				}
				add_opinion = {
					target = root
					modifier = rejected_me_opinion
				}
			}
		}
		ai_chance = {
			base = 15
			modifier = { #More likely if the candidate is not noble
				add = 20
				scope:potential_candidate = {
					is_lowborn = yes
				}
			}
			modifier = { #More likely if the candidate is not the child of a vassal
				add = 40
				scope:potential_candidate = {
					NOT = {
						any_close_family_member = { 
							is_vassal_of = root 
						}
					}
				}
			}
			modifier = { #More likely if the candidate doesn't have any good traits
				add = 15
				scope:potential_candidate = {
					NOR = {
						has_trait = beauty_good
						has_trait = intellect_good
						has_trait = physique_good
						has_trait = fecund
					}
				}
			}
			modifier = { #More likely if root is chaste
				add = 20
				has_trait = chaste
			}
			modifier = { #More likely if root has kids
				add = 15
				any_child = {
					even_if_dead = no
					count >= 1
				}
			}
			modifier = { #More likely if candidate has bad skills
				add = 15
				scope:potential_candidate = {
					OR = {
						learning <= 8
						diplomacy <= 8
						martial <= 8
						stewardship <= 8
						intrigue <= 8
						prowess <= 8
					}
				}
			}
		}
	}
	
	after = {
		hidden_effect = {
			bride_show_next_candidate_effect = yes
		}
	}

}

bride_show.0003 = {
	type = character_event
	title = bride_show.0003.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					is_male = yes
				}
				desc = bride_show.0003_curtsy.desc
			}
			triggered_desc = {
				trigger = {
					is_female = yes
				}
				desc = bride_show.0003_bow.desc
			}
		}
		desc = bride_show.0003.end.desc
	}
	theme = realm
	
	right_portrait = { 	
		character = root
		animation = personality_honorable
	}
	left_portrait = { 	
		character = scope:candidate_1
		animation = personality_compassionate
	}
	lower_left_portrait = { 	
		character = scope:candidate_2
	}
	lower_center_portrait = { 	
		trigger = {
			exists = scope:candidate_4
		}
		character = scope:candidate_4
	}
	lower_right_portrait = { 	
		character = scope:candidate_3
	}
	
	option = {
		name = bride_show.0003.a
		
		hidden_effect = {
			every_in_list = {
				list = chosen_candidate_list
				if = {
					limit = {
						has_character_flag = created_bride_flag
					}
					if = {
						limit = {
							NOT = {
								exists = court_owner
							}
							has_character_flag = rejected_candidate_flag
						}
						death = {
							death_reason = death_vanished
						}
					}
					if = {
						limit = {
							is_alive = yes
						}
						remove_character_flag = created_bride_flag
					}
				}
			}
			random_list = {
				50 = {
					modifier = { # Traits
						add = 10
						has_trait = lustful
					}
					modifier = { # Traits
						add = 10
						has_trait = deviant
					}
					modifier = { # Traits
						add = 10
						has_trait = rakish
					}
					modifier = { # Tier
						add = 10
						highest_held_title_tier >= tier_kingdom
					}
					modifier = { # Consorts
						add = 10
						any_consort = {
							count >= 5
						}
					}
					trigger_event = {
						id = harem_politics.0011
						days = { 7 20 }
					}
				}
				50 = { #Nothing
					modifier = { # Traits
						add = 10
						has_trait = chaste
					}
					modifier = { # Traits
						add = 10
						has_trait = celibate
					}
					modifier = { # Traits
						add = 15
						has_trait = shy
					}
				}
				15 = {
					modifier = { # Traits
						add = 10
						has_trait = lustful
					}
					modifier = { # Traits
						add = 10
						has_trait = deviant
					}
					modifier = { # Traits
						add = 10
						has_trait = rakish
					}
					modifier = { # Tier
						add = 10
						highest_held_title_tier >= tier_duchy
					}
					modifier = { # Consorts
						add = 10
						any_consort = {
							count >= 5
						}
					}
					trigger_event = {
						id = harem_politics.0016
						days = { 7 20 }
					}
				}
			}
		}
		ai_chance = {
			base = 15
		}
	}
}

#############################
##Announcing the Bride Show##
#############################
bride_show.0004 = {
	type = letter_event
	opening = {
		first_valid = {
			triggered_desc = { #Imperial decree
			    trigger = {
					scope:liege = {
						highest_held_title_tier = tier_empire
					}
				}
				desc = bride_show.imperial.desc
			}
			triggered_desc = { #Royal decree
			    trigger = {
					scope:liege = {
						highest_held_title_tier = tier_kingdom
					}
				}
				desc = bride_show.royal.desc
			}
			triggered_desc = { #Princely decree
			    trigger = {
					scope:liege = {
						any_parent = {
							highest_held_title_tier >= tier_kingdom
						}
					}
				}
				desc = bride_show.princely.desc
			}
			desc = bride_show.noble.desc
		}
	}
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:liege = {
						is_male = yes
					}
				}
				desc = bride_show.bride.desc
			}
			triggered_desc = {
				trigger = {
					scope:liege = {
						is_male = yes
					}
				}
				desc = bride_show.bachelor.desc
			}
		}
	}
	sender = scope:liege

	option = {
		name = { #Indifferent
			trigger = {
				agrees_with_bride_show = yes
			}
			text = bride_show.0004.a
		}
		name = { #Negative
			trigger = {
				agrees_with_bride_show = no
			}
			text = bride_show.0004.b
		}
	}
}

################
##Notification##
################
bride_show.0005 = {
	type = letter_event
	opening = {
		first_valid = {
			triggered_desc = { #Imperial decree
			    trigger = {
					scope:liege = {
						highest_held_title_tier = tier_empire
					}
				}
				desc = bride_show.imperial.desc
			}
			triggered_desc = { #Royal decree
			    trigger = {
					scope:liege = {
						highest_held_title_tier = tier_kingdom
					}
				}
				desc = bride_show.royal.desc
			}
			triggered_desc = { #Princely decree
			    trigger = {
					scope:liege = {
						any_parent = {
							highest_held_title_tier >= tier_kingdom
						}
					}
				}
				desc = bride_show.princely.desc
			}
			desc = bride_show.noble.desc
		}
	}
	desc = {
		first_valid = {
			triggered_desc = { #Chosen as a spouse
				trigger = {
					exists = scope:candidate_marriage
					scope:candidate_marriage = scope:potential_candidate
				}
				desc = bride_show.married.desc
			}
			triggered_desc = { #Chosen as a consort
				trigger = {
					exists = scope:candidate_concubinage
					scope:candidate_concubinage = scope:potential_candidate
				}
				desc = bride_show.concubine.desc
			}
			triggered_desc = { #Recruited to court
				trigger = {
					exists = scope:candidate_courtier
					scope:candidate_courtier = scope:potential_candidate
				}
				desc = bride_show.recruit.desc
			}
			#Fallback
			desc = bride_show.fallback.desc
		}
	}
	sender = scope:liege
	
	immediate = {
		show_as_tooltip = {
			scope:liege = { 
				pay_short_term_gold = {
					target = root
					gold = bride_compensation_payment_value
				}
			}
		}
	}

	option = {
		name = { #Indifferent
			trigger = {
				agrees_with_bride_show = yes
			}
			text = bride_show.0004.a
		}
		name = { #Negative
			trigger = {
				agrees_with_bride_show = no
			}
			text = bride_show.0004.b
		}
	}
}

################
##Ranking Wives##
################
bride_show.0006 = {
	type = character_event
	title = bride_show.0006.t
	desc = bride_show.0006.desc
	theme = realm
	right_portrait = { 	
		character = scope:potential_candidate
		animation = personality_compassionate
	}

	option = {
		name = bride_show.0006.a
		trigger = {
			scope:actor = {
				AND = {
					accepts_polygamy = yes
					scope:recipient = {
						AND = {
							is_spouse_of = scope:actor
							is_courtier_of = scope:actor
							NOT = { this = scope:liege.primary_spouse }
						}
					}
				}
			}
		}
		IF = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			appoint_court_position = {
				recipient = scope:potential_candidate
				court_position = grand_consort_court_position
			}
		}
	}

	option = {
		name = bride_show.0006.b
		trigger = {
			scope:actor = {
				AND = {
					accepts_polygamy = yes
					scope:recipient = {
						AND = {
							is_spouse_of = scope:actor
							is_courtier_of = scope:actor
							NOT = { this = scope:liege.primary_spouse }
						}
					}
				}
			}
		}
		IF = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			appoint_court_position = {
				recipient = scope:potential_candidate
				court_position = noble_consort_court_position
			}
		}
	}

	option = {
		name = bride_show.0006.c
		trigger = {
			scope:actor = {
				AND = {
					accepts_polygamy = yes
					scope:recipient = {
						AND = {
							is_spouse_of = scope:actor
							is_courtier_of = scope:actor
							NOT = { this = scope:liege.primary_spouse }
						}
					}
				}
			}
		}
		IF = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			appoint_court_position = {
				recipient = scope:potential_candidate
				court_position = noble_lady_court_position
			}
		}
	}

	option = {
		name = bride_show.0006.d
		trigger = {
			scope:actor = {
				AND = {
					accepts_polygamy = yes
					scope:recipient = {
						AND = {
							is_spouse_of = scope:actor
							is_courtier_of = scope:actor
							NOT = { this = scope:liege.primary_spouse }
						}
					}
				}
			}
		}
		IF = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			appoint_court_position = {
				recipient = scope:potential_candidate
				court_position = noble_attendant_court_position
			}
		}
	}

	option = {
		name = bride_show.0006.e
		trigger = {
			scope:actor = {
				AND = {
					accepts_polygamy = yes
					scope:recipient = {
						AND = {
							is_spouse_of = scope:actor
							is_courtier_of = scope:actor
							NOT = { this = scope:liege.primary_spouse }
						}
					}
				}
			}
		}
		IF = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			appoint_court_position = {
				recipient = scope:potential_candidate
				court_position = consort_court_position
			}
		}
	}

	option = {
		name = bride_show.0006.f
		trigger = {
			scope:actor = {
				AND = {
					accepts_polygamy = yes
					scope:recipient = {
						AND = {
							is_spouse_of = scope:actor
							is_courtier_of = scope:actor
							NOT = { this = scope:liege.primary_spouse }
						}
					}
				}
			}
		}
		IF = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			appoint_court_position = {
				recipient = scope:potential_candidate
				court_position = lady_court_position
			}
		}
	}

	option = {
		name = bride_show.0006.g
		trigger = {
			scope:actor = {
				AND = {
					accepts_polygamy = yes
					scope:recipient = {
						AND = {
							is_spouse_of = scope:actor
							is_courtier_of = scope:actor
							NOT = { this = scope:liege.primary_spouse }
						}
					}
				}
			}
		}
		IF = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			appoint_court_position = {
				recipient = scope:potential_candidate
				court_position = attendant_court_position
			}
		}
	}
}

################
##Ranking Concubines##
################
bride_show.0007 = {
	type = character_event
	title = bride_show.0007.t
	desc = bride_show.0007.desc
	theme = realm
	right_portrait = { 	
		character = scope:potential_candidate
		animation = personality_compassionate
	}

	option = {
		name = bride_show.0007.a
		trigger = {
			scope:actor = {
				AND = {
					accepts_polygamy = no
					scope:recipient = {
						AND = {
							is_concubine_of = scope:actor
							is_courtier_of = scope:actor
						}
					}
				}
			}
		}
		IF = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			appoint_court_position = {
				recipient = scope:potential_candidate
				court_position = grand_consort_court_position
			}
		}
	}

	option = {
		name = bride_show.0007.b
		trigger = {
			scope:actor = {
				AND = {
					accepts_polygamy = no
					scope:recipient = {
						AND = {
							is_concubine_of = scope:actor
							is_courtier_of = scope:actor
						}
					}
				}
			}
		}
		IF = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			appoint_court_position = {
				recipient = scope:potential_candidate
				court_position = noble_consort_court_position
			}
		}
	}

	option = {
		name = bride_show.0007.c
		trigger = {
			scope:actor = {
				AND = {
					accepts_polygamy = no
					scope:recipient = {
						AND = {
							is_concubine_of = scope:actor
							is_courtier_of = scope:actor
						}
					}
				}
			}
		}
		IF = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			appoint_court_position = {
				recipient = scope:potential_candidate
				court_position = noble_lady_court_position
			}
		}
	}

	option = {
		name = bride_show.0007.d
		trigger = {
			scope:actor = {
				AND = {
					accepts_polygamy = no
					scope:recipient = {
						AND = {
							is_concubine_of = scope:actor
							is_courtier_of = scope:actor
						}
					}
				}
			}
		}
		IF = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			appoint_court_position = {
				recipient = scope:potential_candidate
				court_position = noble_attendant_court_position
			}
		}
	}

	option = {
		name = bride_show.0007.e
		IF = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			appoint_court_position = {
				recipient = scope:potential_candidate
				court_position = consort_court_position
			}
		}
	}

	option = {
		name = bride_show.0007.f
		IF = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			appoint_court_position = {
				recipient = scope:potential_candidate
				court_position = lady_court_position
			}
		}
	}

	option = {
		name = bride_show.0007.g
		IF = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			appoint_court_position = {
				recipient = scope:potential_candidate
				court_position = attendant_court_position
			}
		}
	}
}

namespace = bride_show

###################
###Recruit Jarya###
###################

## For dukes ##
bride_show.2000 = {
	hidden = yes
	trigger = {
		is_landed = yes
		hp_accepts_concubinage = yes
		religion = religion:islam_religion
		highest_held_title_tier >= tier_duchy
		trigger_if = {
			limit = {
				has_variable = jarya_recruited
			}
			var:jarya_recruited < 4
		}
	}

	immediate = {
		if = {
			limit = {
				NOT = { exists = scope:liege }
			}
			save_scope_as = liege
		}
		if = {
			limit = {
				NOT = { exists = scope:harem_liege }
			}
			save_scope_as = harem_liege
		}
		if = {
			limit = {
				any_in_list = {
					list = pool_candidates
					NOT = { is_courtier_of = scope:liege }
					recruit_concubines_viable_candidate_trigger = {
						OVERLORD = scope:liege
					}
					count = 0
				}
			}
			if = {
				limit = {
					NOT = { exists = scope:concubine_location }
				}
				hp_select_concubine_location_effect = yes
			}
			calyver_create_candidate_effect = yes
		}
		if = {
			limit = {
				any_in_list = {
					list = pool_candidates
					NOT = { is_courtier_of = scope:liege }
					recruit_concubines_viable_candidate_trigger = {
						OVERLORD = scope:liege
					}
					count = 1
				}
			}
			random_in_list = {
				list = pool_candidates
				limit = {
					NOT = { is_courtier_of = scope:liege }
					recruit_concubines_viable_candidate_trigger = {
						OVERLORD = scope:liege
					}
				}
				save_scope_as = jarya
			}
		}
		else = {
			random_in_list = {
				list = pool_candidates
				limit = {
					NOT = { is_courtier_of = scope:liege }
					recruit_concubines_viable_candidate_trigger = {
						OVERLORD = scope:liege
					}
				}
				weight = {
					base = 50
					modifier = {
						exists = court_owner
						add = -25
					}
					modifier = { # More likely to be captured near bodies of water
						location ?= {
							OR = {
								is_sea_province = yes
								is_riverside_province = yes
								county ?= {
									OR = {
										is_coastal_county = yes
										is_riverside_county = yes
									}
								}
							}
						}
						add = 30
					}
					modifier = { # Christians were especially captured
						religion = religion:christianity_religion
						add = 30
					}
					modifier = {
						location ?= {
							geographical_region = world_europe
						}
						add = 20
					}
					modifier = {
						location ?= {
							geographical_region = world_europe_south
						}
						add = 20
					}
					modifier = {
						location ?= {
							geographical_region = world_europe_west_iberia
						}
						add = 20
					}
					modifier = {
						is_lowborn = no
						add = -10
					}
					# Virginity was prized
					modifier = {
						is_virgin_trigger = yes
						add = 25
					}
					# Skills
					modifier = {
						OR = {
							stewardship >= 9
							diplomacy >= 9
							learning >= 9
						}
						add = 10
					}
					modifier = {
						OR = {
							stewardship >= 13
							diplomacy >= 13
							learning >= 13
						}
						add = 15
					}
					modifier = {
						OR = {
							stewardship >= 17
							diplomacy >= 17
							learning >= 17
						}
						add = 20
					}
					modifier = {
						AND = {
							stewardship >= 13
							diplomacy >= 13
							learning >= 13
						}
						add = 25
					}
					# Good genetics
					modifier = { #Trait considerations
						num_of_good_genetic_traits >= 1
						add = 15
					}
					modifier = {
						num_of_good_genetic_traits >= 2
						add = 20
					}
					# No bad genetic traits
					modifier = {
						num_of_bad_genetic_traits > 0
						add = -25
					}
					# Docile captives would be easier to send
					modifier = {
						has_trait = temperate
						add = 10
					}
					modifier = {
						has_trait = craven
						add = 10
					}
					modifier = {
						has_trait = content
						add = 10
					}
					modifier = {
						has_trait = humble
						add = 10
					}
					modifier = {
						has_trait = lustful
						add = 10
					}
					modifier = {
						has_trait = chaste
						add = -10
					}
					modifier = {
						has_trait = zealous
						add = -20
					}
					# Intellect
					modifier = {
						has_trait = intellect_good_1
						add = 5
					}
					modifier = {
						has_trait = intellect_good_2
						add = 10
					}
					modifier = {
						has_trait = intellect_good_3
						add = 15
					}
					modifier = {
						has_trait = strong
						add = 5
					}
					# Poets
					modifier = {
						has_trait = poet
						add = 5
					}
					modifier = {
						has_trait = poet
						scope:liege = { highest_held_title_tier >= tier_kingdom }
						add = 10
					}
					# Skills
					modifier = { #Diplomacy
						add = {
							value = diplomacy
							divide = 2
						}
					}
					modifier = { #Learning
						add = {
							value = learning
							divide = 2
						}
					}
					modifier = { #Intrigue
						add = {
							value = intrigue
							divide = 2
						}
					}
					# Health
					modifier = {
						is_healthy = yes
						add = 20
					}
					modifier = {
						OR = {
							has_character_modifier = malnourished_modifier
							current_weight < -50
							has_character_modifier = obese_modifier
							current_weight > 50
							has_trait = beauty_bad
						}
						add = -20
					}		
				}
				save_scope_as = jarya
			}
		}
		if = {
			limit = {	
				scope:jarya.court_owner ?= {
					NOR = {
						this = scope:liege
						is_close_family_of = scope:jarya
					}
					is_ai = no
				}
			}
			scope:jarya.court_owner = {
				send_interface_toast = {
					type = event_generic_bad
					title = bride_show.2000.t.court_owner
					right_icon = scope:liege
					left_icon = scope:jarya
					custom_tooltip = bride_show.2000.desc.court_owner
				}
			}
		}
		send_interface_toast = {
			type = event_generic_neutral
			title = {
				first_valid = {
					triggered_desc = {
						trigger = {
							scope:jarya = { is_female = yes }
						}
						desc = bride_show.2000.t_f
					}
					desc = bride_show.2000.t_m
				}
			}
			right_icon = scope:jarya
			scope:liege = {
				add_courtier = scope:jarya
			}
			scope:jarya = {
				add_opinion = {
					target = scope:liege
					modifier = upset_opinion
					opinion = -10
				}
				stress_impact = {
					base = minor_stress_impact_gain
				}
				#In case they received a marriage proposal already
				# add_character_flag = {
				# 	flag = has_been_offered_as_concubine
				# 	days = 1
				# }
				add_character_flag = {
					flag = recently_abducted_concubine
					years = 2
				}
				remove_from_list = pool_candidates
				add_character_flag = {
					flag = blocked_from_leaving
					years = 5
				}
				hidden_effect = {
					return_to_court = yes
					# Chance of conversion to liege's faith
					if = {
						limit = {
							NOR = {
								has_trait = zealous 
								faith = scope:liege.faith
							}
						}
						random = {
							chance = 50
							# Based on current faith
							modifier = {
								faith = {
									faith_hostility_level = {
										target = scope:liege.faith
										value = faith_fully_accepted_level
									}
								}
								add = 30
							}
							modifier = {
								faith = {
									faith_hostility_level = {
										target = scope:liege.faith
										value >= faith_astray_level
									}
								}
								add = -15
							}
							modifier = {
								faith = {
									faith_hostility_level = {
										target = scope:liege.faith
										value >= faith_hostile_level
									}
								}
								add = -15
							}
							modifier = {
								faith = {
									faith_hostility_level = {
										target = scope:liege.faith
										value >= faith_evil_level
									}
								}
								add = -15
							}
							modifier = {
								hp_accepts_harems = yes
								add = 10
							}
							# Based on traits
							modifier = {
								has_trait = cynical
								add = 20
							}
							modifier = {
								has_trait = ambitious
								add = 20
							}
							modifier = {
								has_trait = greedy
								add = 20
							}
							modifier = {
								has_trait = arrogant
								add = 20
							}
							modifier = {
								has_trait = craven
								add = 20
							}
							# Younger characters are more likely to change faiths
							modifier = {
								age < 20
								add = 15
							}
							# Kings and Emperors are more likely to force their servants to convert
							modifier = {
								scope:liege.highest_held_title_tier >= tier_kingdom
								add = 15
							}
							# Zealous rulers are more likely to recruit converted concubines
							modifier = {
								scope:liege = { has_trait = zealous }
								add = 15
							}
							# Cynical rulers don't care much about concubines' faith
							modifier = {
								scope:liege = { has_trait = cynical }
								add = -15
							}
							if = {
								limit = {
									NOT = {
										has_character_flag = abducted_non_believer
									}
								}
								add_character_flag = {
									flag = abducted_non_believer
									years = 5
								}
							}
							set_character_faith = scope:liege.faith
						}
					}
					if = {
						limit = {
							exists = betrothed
							#A check to make sure you haven't somehow gotten betrothed to them during the consideration time
							NOT = { betrothed = scope:actor }
						}
						betrothed = { trigger_event = marriage_interaction.0041 }
						break_betrothal = betrothed
					}
					if = {
						limit = {
							any_close_family_member = {
								NOT = { this = scope:liege }
								count >= 1
							}
						}
						every_close_family_member = {
							limit = {
								NOT = { this = scope:liege }
							}
							add_opinion = {
								target = scope:liege
								modifier = abducted_close_family_crime
							}
							if = {
								limit = {
									is_ai = no
								}
								send_interface_toast = {
									type = event_generic_bad
									title = bride_show.2000.t.close_family
									right_icon = scope:liege
									left_icon = scope:jarya
									custom_tooltip = bride_show.2000.desc.court_owner
								}
							}
						}
					}
					# They should be lowborn
					if = {
						limit = {
							house ?= {
								any_house_member = {
									count = 1
								}
							}
						}
						set_to_lowborn = yes
					}
				}
				# remove_character_flag = has_been_offered_as_concubine
			}
		}
		if = {
			limit = {
				NOT = {
					has_variable = jarya_recruited
				}
			}
			set_variable = {
				name = jarya_recruited
				value = 1
				months = 6
			}
			if = {
				limit = {
					highest_held_title_tier = tier_duchy
				}
				random = {
					chance = 50
					modifier = {
						has_trait = lustful
						add = 10
					}
					trigger_event = {
						id = bride_show.2000
						days = { 7 10 }
					}
				}
			}
			else_if = {
				limit = {
					highest_held_title_tier > tier_duchy
				}
				trigger_event = {
					id = bride_show.2000
					days = { 7 10 }
				}
			}
		}
		else = {
			change_variable = {
				name = jarya_recruited
				add = 1
			}
			# Should we repeat the event?
			# For dukes, the maximum is 3
			if = {
				limit = {
					highest_held_title_tier = tier_duchy
				}
				if = {
					limit = {
						var:jarya_recruited < 3
					}
					random = {
						chance = 25
						modifier = {
							has_trait = lustful
							add = 10
						}
						trigger_event = {
							id = bride_show.2000
							days = { 7 10 }
						}
					}
				}
				else = {
					remove_variable = jarya_recruited
				}
			}
			# For kings+, the maximum is 4
			if = {
				limit = {
					highest_held_title_tier > tier_duchy
				}
				if = {
					limit = {
						var:jarya_recruited < 3
					}
					random = {
						chance = 50
						modifier = {
							has_trait = lustful
							add = 10
						}
						trigger_event = {
							id = bride_show.2000
							days = { 7 10 }
						}
					}
				}
				else_if = {
					limit = {
						var:jarya_recruited = 3
					}
					random = {
						chance = 25
						modifier = {
							has_trait = lustful
							add = 10
						}
						modifier = {
							highest_held_title_tier > tier_kingdom
							add = 10
						}
						trigger_event = {
							id = bride_show.2000
							days = { 7 10 }
						}
					}
				}
				else_if = {
					limit = {
						var:jarya_recruited > 3	
					}
					remove_variable = jarya_recruited
				}
			}
		}
		# The AI is a bit slow and will sometimes convert them to Islam before taking them as concubines
		if = {
			limit = {
				is_ai = yes
				is_character_interaction_valid = {
					recipient = scope:jarya
					interaction = ai_make_concubine_interaction
				}
			}
			random = {
				chance = 10
				modifier = {
					number_of_concubines < number_of_desired_concubines
					add = 60
				}
				modifier = {
					scope:jarya = {
						num_of_good_genetic_traits > 0
					}
					add = 25
				}
				modifier = {
					scope:jarya = {
						num_of_bad_genetic_traits > 0
					}
					add = -50
				}
				modifier = {
					scope:jarya = {
						can_have_children_with = { CHARACTER = scope:liege } # Only if you can have kids since this is about fertility and genetic traits
						fertility > 0.2
					}
					add = 10
				}
				modifier = {
					is_attracted_to_gender_of = scope:jarya
					add = 10
				}
				modifier = {
					NOT = { is_attracted_to_gender_of = scope:jarya }
					add = -25
				}
				modifier = {
					OR = { 
						has_relation_lover = scope:jarya
						has_relation_friend = scope:jarya
						has_relation_soulmate = scope:jarya
						has_relation_best_friend = scope:jarya
					}
					add = 60
				}
				run_interaction = {
					interaction = ai_make_concubine_interaction
					actor = scope:liege
					recipient = scope:jarya
					execute_threshold = accept
				}
			}
		}
	}
}

## For kings and above ##

# Beauty #
bride_show.3000 = {
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = {
					is_female = no
				}
				desc = bride_show.3000_m.t
			}
			desc = bride_show.3000_f.t
		}
		desc = bride_show.0001.t
	}
	desc = bride_show.3000.desc
	theme = realm
	
	left_portrait = { 	
		character = root
		animation = personality_honorable
	}
	immediate = {
		if = {
			limit = {
				NOT = { exists = scope:liege }
			}
			save_scope_as = liege
		}
		if = {
			limit = {
				NOT = { exists = scope:harem_liege }
			}
			save_scope_as = harem_liege
		}
	}

	option = {
		name = bride_show.0002.a
		trigger = {
			gold >= minor_gold_value
		}
		show_as_unavailable = {
			NOT = { gold >= minor_gold_value }
		}
		remove_short_term_gold = minor_gold_value

		set_variable = {
			name = beauty_important
			value = yes
			days = 30
		}
		ai_chance = { #The AI will always choose this
			base = 20
			modifier = {
				gold < minor_gold_value
				factor = 0
			}
		}
	}
	
	option = {
		name = bride_show.0001.b
		ai_chance = {
			base = 1
		}
	}
	after = {
		trigger_event = {
			id = bride_show.3001
			days = { 5 10 }
		}
	}
}

# Virtue #
bride_show.3001 = {
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = {
					is_female = no
				}
				desc = bride_show.3000_m.t
			}
			desc = bride_show.3000_f.t
		}
		desc = bride_show.0001.t
	}
	desc = bride_show.3001.desc
	theme = realm
	
	left_portrait = { 	
		character = root
		animation = personality_compassionate
	}

	immediate = {
		if = {
			limit = {
				NOT = { exists = scope:liege }
			}
			save_scope_as = liege
		}
		if = {
			limit = {
				NOT = { exists = scope:harem_liege }
			}
			save_scope_as = harem_liege
		}
	}

	option = {
		name = bride_show.0002.a
		trigger = {
			gold >= minor_gold_value
		}
		show_as_unavailable = {
			NOT = { gold >= minor_gold_value }
		}
		remove_short_term_gold = minor_gold_value

		set_variable = {
			name = personality_skills_important
			value = yes
			days = 30
		}
		ai_chance = { #The AI will always choose this
			base = 20
			modifier = {
				gold < minor_gold_value
				factor = 0
			}
		}
	}
	
	option = {
		name = bride_show.0001.b
		ai_chance = {
			base = 1
		}
	}
	after = {
		# Manage your subjects #
		trigger_event = {
			id = bride_show.3002
			days = { 5 10 }
		}
	}
}

##Managing the eligible subjects##
scripted_trigger recruit_concubines_eligible_subject_trigger = {
	harem_politics_valid_bride_show_subject_trigger = {
		OVERLORD = scope:liege
	}
	OR = {
		trigger_if = {
			limit = {
				gold >= minor_gold_value
			}
			OR = {
				any_neighboring_and_across_water_top_liege_realm_owner = {
					OR = {
						any_realm_province = {
							recruit_royal_concubines_viable_county_trigger = {
								OVERLORD = scope:liege
							}
						}
						any_tributary = {
							any_realm_province = {
								recruit_royal_concubines_viable_county_trigger = {
									OVERLORD = scope:liege
								}
							}
						}
					}
				}
				any_realm_province = {
					recruit_royal_concubines_viable_county_trigger = {
						OVERLORD = scope:liege
					}
				}
			}
		}
		any_courtier = {
			royal_concubines_eligible_candidate_trigger = {
				OVERLORD = scope:liege
			}
		}
	}
}
bride_show.3002 = { 
	hidden = yes
	immediate = {
		if = {
			limit = {
				any_vassal = {
					recruit_concubines_eligible_subject_trigger = yes
				}
			}
			every_vassal = {
				limit = {
					recruit_concubines_eligible_subject_trigger = yes
				}
				add_to_temporary_list = recruit_concubines_subjects_list
			}
		}
		if = {
			limit = {
				any_tributary = {
					recruit_concubines_eligible_subject_trigger = yes
					NOT = { is_in_list = recruit_concubines_subjects_list }
				}
			}
			every_tributary = {
				limit = {
					recruit_concubines_eligible_subject_trigger = yes
					NOT = { is_in_list = recruit_concubines_subjects_list }
				}
				add_to_temporary_list = recruit_concubines_subjects_list
			}
		}
		if = {
			limit = {
				any_in_list = {
					list = recruit_concubines_subjects_list
					count >= 1
				}
			}
			every_in_list = {
				list = recruit_concubines_subjects_list
				trigger_event = bride_show.3003
			}
		}
		trigger_event = {
			id = bride_show.0004
			days = 3
		}
	}
}


# Your subjects are notified #
scripted_effect add_to_candidate_variable_list_effect = {
	$CANDIDATE$ = {
		add_character_flag = {
			flag = has_been_offered_as_concubine
			days = 11
		}
		add_character_flag = {
			flag = blocked_from_leaving
			days = 11
		}
		if = {
			limit = {
				royal_concubines_eligible_candidate_trigger = {
					OVERLORD = scope:liege
				}
			}
			scope:liege = {
				add_to_variable_list = {
					name = elegible_candidates_list
					target = prev
					days = 10
				}
			}
			if = {
				limit = {
					exists = betrothed
				}
				court_owner = {
					run_interaction = {
						interaction = break_betrothal_interaction
						actor = $CANDIDATE$.court_owner
						recipient = $CANDIDATE$
						execute_threshold = accept
					}
				}
			}
		}
	}
}
bride_show.3003 = {
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:liege = {
						is_female = no
					}
				}
				desc = bride_show.3003_m.t
			}
			desc = bride_show.3003_f.t
		}
	}
	desc = bride_show.3003.desc
	theme = realm
	
	right_portrait = { 	
		character = root
		animation = personality_rational
	}
	left_portrait = {
		character = scope:jarya
		animation = personality_content
	}
	lower_center_portrait = {
		trigger = {
			exists = scope:jarya_1
		}
		character = scope:jarya_1
	}

	trigger = {
		recruit_concubines_eligible_subject_trigger = yes
	}

	immediate = {
		# Find the concubines
		if = {
			limit = {
				any_courtier = {
					royal_concubines_eligible_candidate_trigger = {
						OVERLORD = scope:liege
					}
				}
			}
			ordered_courtier = {
				limit = {
					royal_concubines_eligible_candidate_trigger = {
						OVERLORD = scope:liege
					}
				}
				order_by = {
					value = 1
					add = recruit_royal_concubines_value
				}
				max = 1
				save_scope_as = jarya
			}
		}

		if = {
			limit = {
				gold >= minor_gold_value
				any_neighboring_and_across_water_top_liege_realm_owner = {
					OR = {
						any_realm_province = {
							recruit_royal_concubines_viable_county_trigger = {
								OVERLORD = scope:liege
							}
						}
						any_tributary = {
							any_realm_province = {
								recruit_royal_concubines_viable_county_trigger = {
									OVERLORD = scope:liege
								}
							}
						}
					}
				}
			}
			every_neighboring_and_across_water_top_liege_realm_owner = {
				every_realm_province = {
					limit = {
						recruit_royal_concubines_viable_county_trigger = {
							OVERLORD = scope:liege
						}
					}
					add_to_temporary_list = pool_provinces
				}
				every_tributary = {
					every_realm_province = {
						limit = {
							recruit_royal_concubines_viable_county_trigger = {
								OVERLORD = scope:liege
							}
							NOT = { is_in_list = pool_provinces }
						}
						add_to_temporary_list = pool_provinces
					}
				}
				if = {
					limit = {
						any_in_list = {
							list = pool_provinces
							any_pool_character = {
								province = this
								recruit_royal_concubines_viable_county_trigger = {
									OVERLORD = scope:liege
								}
							}
							count > 0
						}
					}
					every_in_list = {
						list = pool_provinces
			
						every_pool_character = {
							province = this
							limit = {
								recruit_royal_concubines_viable_county_trigger = {
									OVERLORD = scope:liege
								}
							}
							add_to_temporary_list = pool_candidates
						}
					}
				}
				if = {
					limit = {
						any_in_list = {
							list = pool_candidates
							count >= 1
						}
					}
					# Nothing
				}
				else = {
					scope:liege = {
						hp_select_concubine_location_effect = yes
						calyver_create_candidate_effect = yes
					}
				}
				if = {
					limit = {
						any_in_list = {
							list = pool_candidates
							count = 1
						}
					}
					random_in_list = {
						list = pool_candidates
						if = {
							limit = {
								NOT = { exists = scope:jarya}
							}
							save_scope_as = jarya
						}
						else = {
							save_scope_as = jarya_1
						}
					}
				}
				else = {
					ordered_in_list = {
						list = pool_candidates
						order_by = {
							value = 1
							add = recruit_royal_concubines_value
						}
						max = 1
						if = {
							limit = {
								NOT = { exists = scope:jarya}
							}
							save_scope_as = jarya
						}
						else = {
							save_scope_as = jarya_1
						}
					}
				}
			}
		}
	}

	# Send the courtier
	option = {
		name = bride_show.3003.a
		trigger = {
			scope:jarya = {
				royal_concubines_eligible_candidate_trigger = {
					OVERLORD = scope:liege
				}
			}
		}

		add_to_candidate_variable_list_effect = {
			CANDIDATE = scope:jarya
		}

		ai_chance = { #The AI will always choose this
			base = 30
			ai_value_modifier = {
				ai_boldness = -0.15
				ai_greed = 0.3
			}
			modifier = {
				OR = {	
					has_relation_lover = scope:jarya
					has_relation_friend = scope:jarya
				}
				add = -15
			}
			modifier = {
				OR = {	
					has_relation_soulmate = scope:jarya
					has_relation_best_friend = scope:jarya
				}
				add = -20
			}
			modifier = {
				number_of_concubines < number_of_desired_concubines
				scope:jarya = {
					can_become_concubine_of_character_trigger = { CHARACTER = root }
					can_be_taken_as_muslim_concubine_trigger = {  # Can a Muslim be taken as concubine?
						CHARACTER = root
						RECEIVER = root
					}
				}
				add = -15
			}
			modifier = {
				has_trait = ambitious
				add = 15
			}
			opinion_modifier = {
				opinion_target = scope:liege
				multiplier = 0.4
			}
		}
	}
	
	# Send the other candidate
	option = {
		name = bride_show.3003.b
		trigger = {
			exists = scope:jarya_1
			scope:jarya_1 = {
				royal_concubines_eligible_candidate_trigger = {
					OVERLORD = scope:liege
				}
			}
			gold >= minor_gold_value
		}
		show_as_unavailable = {
			gold < minor_gold_value
		}
		remove_short_term_gold = minor_gold_value
		add_courtier = scope:jarya_1
		add_to_candidate_variable_list_effect = {
			CANDIDATE = scope:jarya_1
		}
		stress_impact = {
			greedy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 20
			ai_value_modifier = {
				ai_boldness = -0.15
				ai_greed = -0.3
			}
			modifier = {
				OR = {	
					has_relation_lover = scope:jarya_1
					has_relation_friend = scope:jarya_1
				}
				add = -15
			}
			modifier = {
				OR = {	
					has_relation_soulmate = scope:jarya_1
					has_relation_best_friend = scope:jarya_1
				}
				add = -20
			}
			modifier = {
				number_of_concubines < number_of_desired_concubines
				scope:jarya_1 = {
					can_become_concubine_of_character_trigger = { CHARACTER = root }
					can_be_taken_as_muslim_concubine_trigger = {  # Can a Muslim be taken as concubine?
						CHARACTER = root
						RECEIVER = root
					}
				}
				add = -15
			}
			modifier = {
				has_trait = greedy
				add = -25
			}
			opinion_modifier = {
				opinion_target = scope:liege
				multiplier = 0.4
			}
		}
	}

	# Hire the other candidate
	option = {
		name = bride_show.3003.c
		trigger = {
			allowed_more_concubines = yes
			scope:jarya_1 ?= {
				can_become_concubine_of_character_trigger = { CHARACTER = root }
				can_be_taken_as_muslim_concubine_trigger = {  # Can a Muslim be taken as concubine?
					CHARACTER = root
					RECEIVER = root
				}
			}
			gold >= minor_gold_value
		}
		show_as_unavailable = {
			gold < minor_gold_value
		}
		remove_short_term_gold = minor_gold_value
		hidden_effect = {
			add_courtier = scope:jarya_1
			scope:jarya_1 = {
				return_to_court = yes
			}
			run_interaction = {
				interaction = make_concubine_interaction
				actor = root
				recipient = scope:jarya_1
				execute_threshold = accept
			}
		}
		show_as_tooltip = {
			make_concubine = scope:jarya_1
		}
		stress_impact = {
			greedy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 20
			ai_value_modifier = {
				ai_boldness = 0.15
				ai_greed = -0.3
			}
			modifier = {
				OR = {	
					has_relation_lover = scope:jarya_1
					has_relation_friend = scope:jarya_1
				}
				add = 25
			}
			modifier = {
				OR = {	
					has_relation_soulmate = scope:jarya_1
					has_relation_best_friend = scope:jarya_1
				}
				add = 40
			}
			modifier = {
				number_of_concubines < number_of_desired_concubines
				scope:jarya_1 = {
					can_become_concubine_of_character_trigger = { CHARACTER = root }
					can_be_taken_as_muslim_concubine_trigger = {  # Can a Muslim be taken as concubine?
						CHARACTER = root
						RECEIVER = root
					}
				}
				add = 15
			}
			modifier = {
				has_trait = greedy
				add = -25
			}
			opinion_modifier = {
				opinion_target = scope:jarya_1
				multiplier = 0.2
			}
		}
	}

	# Do nothing
	option = {
		name = bride_show.3003.d
		ai_chance = {
			base = 30
			ai_value_modifier = {
				ai_boldness = 0.15
				ai_greed = 0.3
			}
			modifier = {
				has_trait = ambitious
				add = -15
			}
			opinion_modifier = {
				opinion_target = scope:liege
				multiplier = -0.4
			}
			modifier = {
				hp_accepts_harems = no
				factor = 0
			}
		}
	}
}

scripted_trigger can_still_participate_in_concubine_recruitment_trigger = {
	has_any_illness = no
	is_alive = yes
	is_virgin_trigger = yes
	trigger_if = {
		limit  ={
			religion = religion:islam_religion
		}
		trigger_if = {
			limit = {
				$OVERLORD$.religion = religion:islam_religion
			}
			has_character_flag = abducted_non_believer
		}
		trigger_else = {
			always = yes
		}
	}
	trigger_else = {
		religion != religion:islam_religion
	}
	NOR = {
		has_trait = devoted
		has_trait = celibate
	}
	can_become_concubine_of_character_valid_trigger = { CHARACTER = $OVERLORD$ }
}

scripted_effect recruit_royal_concubines_next_candidate_effect = {
	if = {
		limit = { #I can still pick candidates
			OR = {
				NOT = {		
					exists = scope:candidate_3
				}
				AND = {	
					NOT = {		
						exists = scope:candidate_4
					}
					can_have_four_candidates_trigger = yes
				}
			}
		}
		#Characters will be created only if not at least 4 candidates
		if = {
			limit = { 
				any_in_list = {
					list = potential_candidates_list
					can_still_participate_in_concubine_recruitment_trigger = yes
					court_owner ?= {
						recruit_concubines_eligible_subject_trigger = yes
					}
					count = 0
				}
			}
			if = {
				limit = {
					NOT = { exists = scope:concubine_location }
				}
				hp_select_concubine_location_effect = yes
			}
			calyver_create_candidate_effect = yes
			scope:bride = {
				add_to_list = potential_candidates_list
				add_character_flag = created_bride_flag
			}
			clear_saved_scope = bride
		}
		if = {
			limit = {
				any_in_list = {
					list = potential_candidates_list
					can_still_participate_in_concubine_recruitment_trigger = yes
					court_owner ?= {
						recruit_concubines_eligible_subject_trigger = yes
					}
					count = 1
				}
			}
			random_in_list = {
				list = potential_candidates_list
				limit = {
					can_still_participate_in_concubine_recruitment_trigger = yes
					court_owner ?= {
						recruit_concubines_eligible_subject_trigger = yes
					}
				}
				save_scope_as = potential_candidate
			}
		}
		else = {
			ordered_in_list = {
				list = potential_candidates_list
				limit = {
					can_still_participate_in_concubine_recruitment_trigger = yes
					court_owner ?= {
						recruit_concubines_eligible_subject_trigger = yes
					}
				}
				order_by = {
					value = 1
					add = recruit_royal_concubines_value
				}
				save_scope_as = potential_candidate
			}
		}
		# Chance of good congenital traits, conversion, and skill gains
		scope:potential_candidate = {
			if = {
				limit = {
					scope:liege = { has_variable = beauty_important }
					num_of_good_genetic_traits = 0
				}
				random_list = {
					50 = {
						random_list = {
							100 = {
								add_trait = beauty_good_1
							}
							50 = {
								add_trait = beauty_good_2
							}
							25 = {
								add_trait = beauty_good_3
							}
						}
					}
					50 = {
						random_list = {
							100 = {
								add_trait = physique_good_1
							}
							50 = {
								add_trait = physique_good_2
							}
							25 = {
								add_trait = physique_good_3
							}
						}
					}
				}
				random = {
					chance = 12
					add_trait = fecund
				}
			}
			if = {
				limit = {
					scope:liege = { has_variable = personality_skills_important }
					diplomacy < decent_skill_rating
					learning < decent_skill_rating
					NOT = { has_trait = poet }
				}
				random_list = {
					50 = {
						while = {
							limit = {
								diplomacy < decent_skill_rating
							}
							add_diplomacy_skill = 1
						}
					}
					50 = {
						while = {
							limit = {
								learning < decent_skill_rating
							}
							add_learning_skill = 1
						}
					}
				}
				random = {
					chance = 12
					add_trait = poet
				}
			}
			if = {
				limit = {
					faith != scope:liege.faith
				}
				random = {
					chance = 60
					modifier = {
						has_trait = zealous
						add = -50
					}
					modifier = {
						has_trait = brave
						add = -25
					}
					modifier = {
						has_trait = cynical
						add = 30
					}
					modifier = {
						has_trait = ambitious
						add = 5
					}
					modifier = {
						has_trait = arrogant
						add = 5
					}
					modifier = {
						has_trait = greedy
						add = 5
					}
					modifier = {
						has_trait = craven
						add = 10
					}
					set_character_faith = scope:liege.faith
				}
			}
			remove_from_list = potential_candidates_list
			if = {
				limit = {
					is_in_list = pool_candidates
				}
				remove_from_list = pool_candidates
			}
		}
	}

	#Are we done? Yes
	if = {
		limit = {
			OR = {
				AND = {	
					exists = scope:candidate_3
					can_have_four_candidates_trigger = no
				}
				exists = scope:candidate_4
			}
		}
		trigger_event = bride_show.3006
	}
	#No
	else = {
		trigger_event = bride_show.3005
	}
}

bride_show.3004 = { 
	type = character_event
	title = bride_show.3004.t
	desc = bride_show.3004.desc
	theme = realm
	
	right_portrait = { 	
		character = root
		animation = personality_rational
	}
	
	# Let's go!
	option = {
		name = bride_show.3004.a
		every_in_list = {
			variable = elegible_candidates_list
			add_to_list = potential_candidates_list
		}
		clear_variable_list = elegible_candidates_list
		recruit_royal_concubines_next_candidate_effect = yes
		ai_chance = {
			base = 1
		}
	}
}

##Pick your candidates##
bride_show.3005 = {
	type = character_event
	title = {
		first_valid = {
			triggered_desc = {
				trigger = {
					is_female = no
					government_has_flag = government_is_nomadic
				}
				desc = bride_show.0005_m_nomadic.t
			}
			triggered_desc = {
				trigger = {
					is_female = no
					government_has_flag = government_is_tribal
				}
				desc = bride_show.0005_m_tribal.t
			}
			triggered_desc = {
				trigger = {
					is_female = no
				}
				desc = bride_show.0005_m.t
			}
			triggered_desc = {
				trigger = {
					is_female = yes
					government_has_flag = government_is_nomadic
				}
				desc = bride_show.0005_f_nomadic.t
			}
			triggered_desc = {
				trigger = {
					is_female = yes
					government_has_flag = government_is_tribal
				}
				desc = bride_show.0005_f_tribal.t
			}
			desc = bride_show.0005_f.t
		}
	}
	desc = {
		first_valid = { #Intro
			triggered_desc = {
				trigger = {
					OR = {	
						exists = scope:candidate_3
						AND = {
							exists = scope:candidate_2
							can_have_four_candidates_trigger = no
						}
					}
				}
				desc = bride_show.0005.start_3.desc
			}
			triggered_desc = {
				trigger = {
					OR = {	
						exists = scope:candidate_1
						AND = {
							exists = scope:candidate_2
							can_have_four_candidates_trigger = yes
						}
					}
				}
				desc = bride_show.0005.start_2.desc
			}
			triggered_desc = {
				desc = bride_show.0005.start.desc
			}
		}
		first_valid = { #Traits
			triggered_desc = {
				trigger = { #2 #4
					OR = {
						AND = {	
							exists = scope:candidate_1
							NOT = {
								exists = scope:candidate_2
							}
						}
						AND = {
							exists = scope:candidate_3
							NOT = {
								exists = scope:candidate_4
							}
						}
					}
					scope:potential_candidate = {
						AND = {
							OR = {
								has_trait = shy
								has_trait = paranoid
								has_trait = craven
							}
							NOR = {
								has_trait = ambitious
								has_trait = brave
								has_trait = arrogant
							}
						}
					}
				}
				desc = bride_show.0005.shy_2.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						AND = {
							OR = {
								has_trait = shy
								has_trait = paranoid
								has_trait = craven
							}
							NOR = {
								has_trait = ambitious
								has_trait = brave
								has_trait = arrogant
							}
						}
					}
				}
				desc = bride_show.0005.shy.desc
			}
			triggered_desc = {
				trigger = { #2 #4
					OR = {
						AND = {	
							exists = scope:candidate_1
							NOT = {
								exists = scope:candidate_2
							}
						}
						AND = {
							exists = scope:candidate_3
							NOT = {
								exists = scope:candidate_4
							}
						}
					}
					scope:potential_candidate = {
						AND = {
							OR = {
								has_trait = brave
								has_trait = ambitious
							}
							NOR = {
								has_trait = craven
								has_trait = paranoid
								has_trait = shy
								has_trait = arrogant
							}
						}
					}
				}
				desc = bride_show.0005.brave_2.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						AND = {
							OR = {
								has_trait = brave
								has_trait = ambitious
							}
							NOR = {
								has_trait = craven
								has_trait = paranoid
								has_trait = shy
								has_trait = arrogant
							}
						}
					}
				}
				desc = bride_show.0005.brave.desc
			}
			triggered_desc = {
				trigger = { #2 #4
					OR = {
						AND = {	
							exists = scope:candidate_1
							NOT = {
								exists = scope:candidate_2
							}
						}
						AND = {
							exists = scope:candidate_3
							NOT = {
								exists = scope:candidate_4
							}
						}
					}
					scope:potential_candidate = {
						AND = {
							OR = {
								has_trait = arrogant
							}
							NOR = {
								has_trait = craven
								has_trait = paranoid
								has_trait = shy
								has_trait = brave
								has_trait = ambitious
							}
						}
					}
				}
				desc = bride_show.0005.arrogant_2.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						AND = {
							OR = {
								has_trait = arrogant
							}
							NOR = {
								has_trait = craven
								has_trait = paranoid
								has_trait = shy
								has_trait = brave
								has_trait = ambitious
							}
						}
					}
				}
				desc = bride_show.0005.arrogant.desc
			}
			triggered_desc = {
				trigger = { #2 #4
					OR = {
						AND = {	
							exists = scope:candidate_1
							NOT = {
								exists = scope:candidate_2
							}
						}
						AND = {
							exists = scope:candidate_3
							NOT = {
								exists = scope:candidate_4
							}
						}
					}
				}
				desc = bride_show.0005.generic_1_2.desc
			}
			triggered_desc = {
				desc = bride_show.0005.generic_1.desc
			}
		}
		first_valid = { #Beauty
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						has_trait = beauty_good_3
					}
				}
				desc = bride_show.0005.beautiful.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						has_trait = beauty_good_2
					}
				}
				desc = bride_show.0005.handsome.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						has_trait = beauty_good_1
					}
				}
				desc = bride_show.0005.comely.desc
			}
			triggered_desc = {
				desc = bride_show.0005.generic_2.desc
			}
		}
		first_valid = { #Intellect
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						has_trait = intellect_good_3
					}
				}
				desc = bride_show.0005.genius.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						has_trait = intellect_good_2
					}
				}
				desc = bride_show.0005.intelligent.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						has_trait = intellect_good_1
					}
				}
				desc = bride_show.0005.quick.desc
			}
			triggered_desc = {
				desc = bride_show.0005.generic_3.desc
			}
		}
		first_valid = { #Skills
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						AND = {
							diplomacy <= 11
							learning <= 11
							stewardship >= 12
						}
					}
				}
				desc = bride_show.0005.stewardship.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						AND = {
							diplomacy <= 11
							learning >= 12
							stewardship <= 11
						}
					}
				}
				desc = bride_show.0005.learning.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						AND = {
							diplomacy >= 12
							learning <= 11
							stewardship <= 11
						}
					}
				}
				desc = bride_show.0005.diplomacy.desc
			}
			triggered_desc = {
				trigger = {
					scope:potential_candidate = {
						OR = {
							AND = {
								stewardship >= 12
								learning >= 12
							}
							AND = {
								stewardship >= 12
								diplomacy >= 12
							}
							AND = {
								learning >= 12
								diplomacy >= 12
							}
						}
					}
				}
				desc = bride_show.0005.multiple.desc
			}
			triggered_desc = {
				desc = bride_show.0005.generic_4.desc
			}
		}
		desc = bride_show.0005.end.desc
	}
	theme = realm
	
	left_portrait = {
		character = scope:potential_candidate
		animation = flirtation
	}
	lower_center_portrait = {
		trigger = {
			scope:pc_court_owner ?= scope:potential_candidate.court_owner
		}
		character = scope:pc_court_owner
	}

	immediate = {
		if = {
			limit = {
				NOT = {
					exists = scope:liege
				}
			}
			save_scope_as = liege
		}
		if = {
			limit = {
				NOT = { exists = scope:harem_liege }
			}
			save_scope_as = harem_liege
		}
		scope:potential_candidate.court_owner ?= {
			save_scope_as = pc_court_owner
		}
	}

	#Make them my concubine
	option = {
		name = bride_show.3005.a
		trigger = {
			allowed_concubines = yes
			allowed_more_concubines = yes
			scope:potential_candidate = {
				could_marry_character_trigger = { CHARACTER = scope:liege }
			}
			gold >= bride_compensation_payment_value
		}
		show_as_unavailable = {
			allowed_concubines = yes
			allowed_more_concubines = yes
			scope:potential_candidate = {
				could_marry_character_trigger = { CHARACTER = scope:liege }
			}
			gold < bride_compensation_payment_value
		}
		# flavor = { #To get warning if you don't have enough money
		# 	triggered_desc = {
		# 		trigger = {
		# 			NOT = { gold >= bride_compensation_payment_value }
		# 		}
		# 		desc = holy_order.0202.a._not.tt
		# 	}
		# }
		
		save_scope_value_as = {
			name = gold_to_pay
			value = bride_compensation_payment_value
		}
		#Reward
		if = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			pay_short_term_gold = {
				target = scope:potential_candidate.court_owner
				gold = bride_compensation_payment_value
			}
			scope:potential_candidate = {
				save_scope_as = candidate_concubinage
				court_owner = {
					hidden_effect = {
						send_interface_toast = {
							type = event_generic_neutral
							title = chosen_consort_t
							right_icon = scope:liege
							left_icon = scope:potential_candidate
							custom_tooltip = chosen_concubine_d
							

							scope:liege = { 
								show_as_tooltip = {
									pay_short_term_gold = {
										target = scope:potential_candidate.court_owner
										gold = bride_compensation_payment_value
									}
								}
								if = {
									limit = {
										highest_held_title_tier = tier_kingdom
									}
									scope:potential_candidate.court_owner = {
										add_prestige = miniscule_prestige_value
									}
								}
								else_if = {
									limit = {
										highest_held_title_tier >= tier_empire
									}
									scope:potential_candidate.court_owner = {
										add_prestige = minor_prestige_value
									}
								}

								if = { #Scale opinion gain a bit depending on how cool the concubine is
									limit = {
										scope:potential_candidate = {
											OR = {
												has_trait = beauty_good_2
												has_trait = beauty_good_3
												num_of_good_genetic_traits > 1
												has_relation_lover = scope:liege
												has_relation_soulmate = scope:liege
											}
											trigger_if = {
												limit = {
													is_female = yes
												}
												age < define:NChildbirth|MAX_FEMALE_REPRODUCTION_AGE
											}
										}
									}
									add_opinion = {
										target = scope:pc_court_owner
										modifier = grateful_opinion
										opinion = 30
									}
								}
								else_if = {
									limit = {
										scope:potential_candidate = {
											OR = {
												has_trait = beauty_good_1
												num_of_good_genetic_traits > 0
												has_relation_friend = scope:liege
												has_relation_best_friend = scope:liege
											}
											trigger_if = {
												limit = {
													is_female = yes
												}
												age < define:NChildbirth|MAX_FEMALE_REPRODUCTION_AGE
											}
										}
									}
									add_opinion = {
										target = scope:pc_court_owner
										modifier = grateful_opinion
										opinion = 20
									}
								}
								else = {
									add_opinion = {
										target = scope:pc_court_owner
										modifier = grateful_opinion
										opinion = 10
									}
								}
							}

							gain_influence_harem_politics_effect = {
								RECIPIENT = scope:pc_court_owner
								CHARACTER = scope:liege
								TARGET = scope:potential_candidate
							}
						}
					}
				}
			}
			
			#Courtly vassals get a positive opinion
			if = {
				limit = {
					scope:potential_candidate.court_owner = {
						is_vassal_of = scope:liege
						has_vassal_stance = courtly
						agrees_with_bride_show = yes
					}
				}
				scope:potential_candidate.court_owner = {
					add_opinion = {
						target = scope:liege
						modifier = pleased_opinion
						opinion = 10
					}
				}
			}
			stress_impact = {
				paranoid = miniscule_stress_impact_gain
			}
		}
		else = {
			remove_short_term_gold = bride_compensation_payment_value
		}
		
		#Concubinage effects
		hidden_effect = {
			add_courtier = scope:potential_candidate
			scope:potential_candidate = {
				if = {
					limit = {
						is_hostage = yes
					}
					return_hostage = yes
				}
				return_to_court = yes
			}
			run_interaction = {
				interaction = make_concubine_interaction
				actor = scope:liege
				recipient = scope:potential_candidate
				execute_threshold = accept
			}
		}
		show_as_tooltip = {
			make_concubine = scope:potential_candidate
		}
		
		ai_chance = {
			base = 45
			# Compatibility
			compatibility_modifier = { #Trait compatibility
				who = root
				compatibility_target = scope:potential_candidate
				min = -50
				max = 50
				multiplier = 2
			}
			option_modifier = {
				who = scope:liege
				opinion_target = scope:potential_candidate
				multiplier = 0.2
			}
			# Traits
			modifier = { #Weigh down for stress
				add = -35
				has_trait = paranoid
				exists = scope:potential_candidate.court_owner
			}
			modifier = { #Weigh down for stress
				add = -25
				has_trait = shy
			}
			modifier = { #More likely if root is lustful
				add = 20
				has_trait = lustful
			}

			# Number of concubines
			modifier = { #More likely if root doesn't have enough spouses
				add = 15
				number_of_concubines < number_of_desired_concubines
			}

			# Sender
			modifier = { #More likely if the candidate was sent by a vassal
				add = 5
				scope:potential_candidate.court_owner ?= {
					OR = {
						is_tributary_of = root
						is_vassal_of = root
					}
				}
			}
			modifier = { #More likely if the candidate was sent by a powerful vassal
				add = 10
				scope:potential_candidate.court_owner ?= {
					OR = {
						is_powerful_vassal_of = root
						is_councillor_of = root
					}
				}
			}
			modifier = {
				government_has_flag = government_is_administrative
				scope:potential_candidate.court_owner ?= {
					government_has_flag = government_is_administrative
					top_liege ?= scope:liege
					house ?= {
						is_dominant_family = yes
					}
				}
				add = 15
			}
			modifier = {
				scope:potential_candidate.court_owner ?= {
					tier_difference = {
						target = scope:liege
						value >= -1
					}
				}
				add = 5
			}

			# Genetic traits
			modifier = { # Beauty
				add = 10
				scope:potential_candidate = {
					has_trait = beauty_good_1
				}
			}
			modifier = { # Beauty
				add = 15
				scope:potential_candidate = {
					has_trait = beauty_good_2
				}
			}
			modifier = { # Beauty
				add = 20
				scope:potential_candidate = {
					has_trait = beauty_good_3
				}
			}

			modifier = { # Physique
				add = 5
				scope:potential_candidate = {
					has_trait = physique_good_1
				}
			}
			modifier = { # Physique
				add = 10
				scope:potential_candidate = {
					has_trait = physique_good_2
				}
			}
			modifier = { # Physique
				add = 15
				scope:potential_candidate = {
					has_trait = physique_good_3
				}
			}

			modifier = { # Intellect
				add = 5
				scope:potential_candidate = {
					has_trait = intellect_good_1
				}
			}
			modifier = { # Intellect
				add = 10
				scope:potential_candidate = {
					OR = {
						has_trait = intellect_good_2
						has_trait = intellect_good_3
					}
				}
			}

			#Other traits
			modifier = { #More likely if the candidate has excellent traits
				add = 15
				scope:potential_candidate = {
					has_trait = pure_blooded
				}
			}
			modifier = { #More likely if the candidate has excellent traits
				add = 40
				scope:potential_candidate = {
					has_trait = golden_lineage
				}
			}
			modifier = { #More likely if the candidate is virtuous
				add = 10
				scope:potential_candidate = {
					num_sinful_traits = 0
				}
			}
			modifier = { #More likely if the candidate is virtuous
				add = {
					value = scope:potential_candidate.num_virtuous_traits
					multiply = 5
				}
				scope:potential_candidate = {
					num_virtuous_traits >= 1
				}
			}

			# Skills
			modifier = { #More likely if candidate has good skills
				add = {
					value = scope:potential_candidate.learning
				}
			}
			modifier = { #More likely if candidate has good skills
				add = {
					value = scope:potential_candidate.diplomacy
				}
			}
			modifier = {
				has_trait = poet
			}
			modifier = { #More likely if the candidate isn't a criminal
				add = 5
				NOT = { has_imprisonment_reason = scope:potential_candidate }
			}
		}
	}

	#Recruit to court
	option = { # Recruit to court and break betrothal
		name = bride_show.3005.b
		trigger = {
			gold >= bride_compensation_payment_value
		}
		show_as_unavailable = { 
			gold < bride_compensation_payment_value
		}
		
		save_scope_value_as = {
			name = gold_to_pay
			value = bride_compensation_payment_value
		}
		#Reward
		if = {
			limit = {
				exists = scope:potential_candidate.court_owner
			}
			pay_short_term_gold = {
				target = scope:potential_candidate.court_owner
				gold = bride_compensation_payment_value
			}
			scope:potential_candidate = {
				save_scope_as = candidate_courtier
				court_owner = {
					hidden_effect = {
						send_interface_toast = {
							type = event_generic_neutral
							title = chosen_candidate_t
							right_icon = scope:liege
							left_icon = scope:potential_candidate
							custom_tooltip = chosen_courtier_d
							
							show_as_tooltip = {
								scope:liege = { 
									pay_short_term_gold = {
										target = scope:potential_candidate.court_owner
										gold = bride_compensation_payment_value
									}
								}
							}
							gain_influence_harem_politics_effect = {
								RECIPIENT = scope:potential_candidate.court_owner
								CHARACTER = scope:liege
								TARGET = scope:potential_candidate
							}
						}
					}
				}
			}
			stress_impact = {
				paranoid = miniscule_stress_impact_gain
			}
		}
		else = {
			remove_short_term_gold = bride_compensation_payment_value
		}
		
		scope:potential_candidate = {
			bride_show_saved_candidate_effect = yes # Check
			bride_show_break_betrothal_candidate_effect = yes # Check
		}
		hidden_effect = {
			if = {
				limit = {
					scope:potential_candidate = {
						is_hostage = yes
					}
				}
				scope:potential_candidate = {
					return_hostage = yes
				}
			}
		}
		add_courtier = scope:potential_candidate
		scope:potential_candidate = {
			hidden_effect = {
				return_to_court = yes
			}
		}
		
		ai_chance = {
			base = 0
		}
	}

	# Pass
	option = {
		name = bride_show.0005.e
		if = {
			limit = { 
				OR = {
					AND = {	
						exists = scope:candidate_2 
						can_have_four_candidates_trigger = no
					}
					exists = scope:candidate_3
				}
			}
			custom_tooltip = bride_show.0005.e_last.tt
		}
		else  = {
			custom_tooltip = bride_show.0005.e.tt
		}
		
		if = {
			limit = {
				exists = scope:potential_candidate.court_owner
				scope:potential_candidate.court_owner = {
					AND = {
						is_vassal_of = root
						has_vassal_stance = courtly
						any_close_family_member = {
							this = scope:potential_candidate
						}
						agrees_with_bride_show = yes
					}
				}
			}
			scope:potential_candidate.court_owner = {
				add_opinion = {
					target = root
					modifier = courtly_vassal_rejected_opinion
				}
			}
		}
		
		scope:potential_candidate = {
			bride_show_saved_candidate_effect = yes
			add_character_flag = {
				flag = rejected_candidate_flag
				days = 5
			}
			if = {
				limit = {
					NOR = {
						has_trait = paranoid
						has_trait = craven
						has_trait = shy
						has_trait = chaste
						has_trait = celibate
					}
					is_betrothed = no
					agrees_with_bride_show = yes
				}
				add_opinion = {
					target = root
					modifier = rejected_me_opinion
				}
			}
			else_if = {
				limit = {
					AND = {
						OR = {
							has_trait = arrogant
							has_trait = greedy
							has_trait = ambitious
						}
						agrees_with_bride_show = yes
					}
				}
				add_opinion = {
					target = root
					modifier = rejected_me_opinion
				}
			}
		}
		ai_chance = {
			base = 15
			modifier = { #Paranoid
				add = 20
				has_trait = paranoid
			}
			modifier = { #Shy
				add = 20
				has_trait = shy
			}
			modifier = { #Craven
				add = 10
				has_trait = craven
			}
			modifier = { #More likely if the candidate is not the child of a vassal
				add = 30
				scope:potential_candidate = {
					NOT = {
						any_close_family_member = { 
							is_vassal_of = root 
						}
					}
				}
			}
			modifier = { #More likely if the candidate doesn't have any good traits
				add = 15
				scope:potential_candidate = {
					NOR = {
						has_trait = beauty_good
						has_trait = intellect_good
						has_trait = physique_good
						has_trait = fecund
					}
				}
			}
			modifier = { #More likely if candidate has bad skills
				add = 15
				scope:potential_candidate = {
					NOR = {
						learning >= medium_skill_rating
						diplomacy >= medium_skill_rating
						martial >= medium_skill_rating
						stewardship >= medium_skill_rating
						intrigue >= medium_skill_rating
						prowess >= medium_skill_rating
					}
				}
			}
			modifier = {
				scope:potential_candidate = {
					num_of_bad_genetic_traits >= 1
				}
				add = {
					value = 25
					if = {
						limit = {
							num_of_bad_genetic_traits >= 2
						}
						add = 10
					}
				}
			}
		}
	}
	
	after = {
		if = {
			limit = {
				exists = scope:pc_court_owner
			}
			clear_saved_scope = pc_court_owner
		}
		hidden_effect = {
			bride_show_next_candidate_effect = yes
		}
	}

}
##############################
# RITUAL CULTURAL TRADITIONS #
##############################

tradition_monogamous = {
	category = ritual

	layers = {
		0 = learning
		1 = western
		4 = knight.dds
	}
	
	can_pick = {
		custom_tooltip = {
			text = only_one_marriage_tradition_allowed
			trigger_if = {
				limit = {
					OR = {
						NOT = { exists = scope:replacing }
						NOR = {
							scope:replacing = culture_tradition:tradition_polygamous
							scope:replacing = culture_tradition:tradition_concubines
						}
					}
				}
				NOR = {
					culture_tradition:tradition_polygamous = { is_in_list = traits }
					culture_tradition:tradition_concubines = { is_in_list = traits }
				}
			}
		}
	}
	can_pick_for_hybridization = {
		custom_tooltip = {
			text = only_one_marriage_tradition_allowed
			NOT = { # Only blocks polygamous to avoid duplicate warnings, but is blocked by concubines
				culture_tradition:tradition_polygamous = { is_in_list = traits }
			}
		}
	}
	
	parameters = {
		number_of_spouses = 1
		romance_scheme_bonus_vs_spouse = yes
	}
	
	character_modifier = {
		spouse_opinion = 10
	}
	
	cost = {
		prestige = {
			add = {
				value = tradition_base_cost
				desc = BASE
				format = "BASE_VALUE_FORMAT"
			}
			if = {
				limit = {
					NOT = {
						scope:character.faith = {
							has_doctrine = doctrine_monogamy
						}
					}
				}
				add = {
					value = tradition_unfulfilled_criteria_penalty
					desc = cheaper_tradition_from_faith
				}
			}
			
			multiply = tradition_replacement_cost_if_relevant
		}
	}
	
	ai_will_do = { value = 0 }
}

tradition_polygamous = {
	category = ritual

	layers = {
		0 = diplo
		1 = mena
		4 = temple.dds
	}
	
	can_pick = {
		custom_tooltip = {
			text = only_one_marriage_tradition_allowed
			trigger_if = {
				limit = {
					OR = {
						NOT = { exists = scope:replacing }
						NOR = {
							scope:replacing = culture_tradition:tradition_monogamous
							scope:replacing = culture_tradition:tradition_concubines
						}
					}
				}
				NOR = {
					culture_tradition:tradition_monogamous = { is_in_list = traits }
					culture_tradition:tradition_concubines = { is_in_list = traits }
				}
			}
		}
	}
	can_pick_for_hybridization = {
		custom_tooltip = {
			text = only_one_marriage_tradition_allowed
			NOT = { # Only blocks concubines to avoid duplicate warnings, but is blocked by monogamous
				culture_tradition:tradition_concubines = { is_in_list = traits }
			}
		}
	}
	
	parameters = {
		number_of_spouses = 4
		allows_polygamy = yes
	}
	
	cost = {
		prestige = {
			add = {
				value = tradition_double_base_cost
				desc = BASE
				format = "BASE_VALUE_FORMAT"
			}
			if = {
				limit = {
					NOT = {
						scope:character.faith = {
							OR = {
								has_doctrine_parameter = allows_polygamy
								has_doctrine_parameter = allows_concubinage
							}
						}
					}
				}
				add = {
					value = tradition_unfulfilled_criteria_penalty
					desc = cheaper_tradition_from_faith
				}
			}
			
			multiply = tradition_replacement_cost_if_relevant
		}
	}
	
	ai_will_do = { value = 0 }
}

tradition_concubines = {
	category = ritual

	layers = {
		0 = intrigue
		1 = indian
		4 = greeting.dds
	}
	
	can_pick = {
		custom_tooltip = {
			text = only_one_marriage_tradition_allowed
			trigger_if = {
				limit = {
					OR = {
						NOT = { exists = scope:replacing }
						NOR = {
							scope:replacing = culture_tradition:tradition_monogamous
							scope:replacing = culture_tradition:tradition_polygamous
						}
					}
				}
				NOR = {
					culture_tradition:tradition_monogamous = { is_in_list = traits }
					culture_tradition:tradition_polygamous = { is_in_list = traits }
				}
			}
		}
	}
	can_pick_for_hybridization = {
		custom_tooltip = {
			text = only_one_marriage_tradition_allowed
			NOT = { # Only blocks monogamous to avoid duplicate warnings, but is blocked by polygamous
				culture_tradition:tradition_monogamous = { is_in_list = traits }
			}
		}
	}
	
	parameters = {
		number_of_spouses = 1
		number_of_consorts = 3
		allows_concubinage = yes
		disallows_royal_concubine_prestige_penalty_offset = yes
		disallows_imperial_concubine_prestige_penalty_offset = yes
	}
	
	cost = {
		prestige = {
			add = {
				value = tradition_double_base_cost
				desc = BASE
				format = "BASE_VALUE_FORMAT"
			}
			if = {
				limit = {
					NOT = {
						scope:character.faith = {
							OR = {
								has_doctrine_parameter = allows_polygamy
								has_doctrine_parameter = allows_concubinage
							}
						}
					}
				}
				add = {
					value = tradition_unfulfilled_criteria_penalty
					desc = cheaper_tradition_from_faith
				}
			}
			
			multiply = tradition_replacement_cost_if_relevant
		}
	}
	
	ai_will_do = { value = 0 }
}

tradition_harem = {
	category = ritual

	layers = {
		0 = intrigue
		1 = mena
		4 = greeting.dds
	}
	is_shown = {
		has_game_rule = khd_combine_polygamy_concubines_allowed
		has_game_rule = khd_allowed_doctrines_harem
	}
	can_pick = {
		custom_tooltip = {
			text = only_one_marriage_tradition_allowed
			trigger_if = {
				limit = {
					OR = {
						NOT = { exists = scope:replacing }
						NOR = {
							scope:replacing = culture_tradition:tradition_monogamous
							scope:replacing = culture_tradition:tradition_polygamous
							scope:replacing = culture_tradition:tradition_concubines
						}
					}
				}
				NOR = {
					culture_tradition:tradition_monogamous = { is_in_list = traits }
					culture_tradition:tradition_polygamous = { is_in_list = traits }
					culture_tradition:tradition_concubines = { is_in_list = traits }
				}
			}
		}
	}
	can_pick_for_hybridization = {
		custom_tooltip = {
			text = only_one_marriage_tradition_allowed
			NOR = { # Only blocks monogamous to avoid duplicate warnings, but is blocked by polygamous
					culture_tradition:tradition_monogamous = { is_in_list = traits }
					culture_tradition:tradition_polygamous = { is_in_list = traits }
					culture_tradition:tradition_concubines = { is_in_list = traits }
			}
		}
	}
	
	parameters = {
		number_of_spouses = 4
		number_of_consorts = 11
		allows_concubinage = yes
		allows_polygamy = yes
		disallows_royal_concubine_prestige_penalty_offset = yes
		disallows_imperial_concubine_prestige_penalty_offset = yes
	}
	
	cost = {
		prestige = {
			add = {
				value = tradition_double_base_cost
				desc = BASE
				format = "BASE_VALUE_FORMAT"
			}
			if = {
				limit = {
					NOT = {
						scope:character.faith = {
							OR = {
								has_doctrine_parameter = allows_polygamy
								has_doctrine_parameter = allows_concubinage
							}
						}
					}
				}
				add = {
					value = tradition_unfulfilled_criteria_penalty
					desc = cheaper_tradition_from_faith
				}
			}
			
			multiply = tradition_replacement_cost_if_relevant
		}
	}
	
	ai_will_do = { value = 0 }
}

#This is the paramourial tradition but hidden for now, works to suppress the cultural parameter errors that would otherwise arise for the unused emperer/king compensation.
#ToDo: Need to adjust the can_pick of above traditions and this one to account for it's existence. Would also need to change the HoF Cultural Tradition removal event. 
tradition_paramourial = {
	category = ritual

	layers = {
		0 = intrigue
		1 = western
		4 = greeting.dds
	}
	is_shown = {
		always = no
	}
	can_pick = {
		custom_tooltip = {
			text = only_one_marriage_tradition_allowed
			trigger_if = {
				limit = {
					OR = {
						NOT = { exists = scope:replacing }
						NOR = {
							scope:replacing = culture_tradition:tradition_monogamous
							scope:replacing = culture_tradition:tradition_polygamous
							scope:replacing = culture_tradition:tradition_concubines
						}
					}
				}
				NOR = {
					culture_tradition:tradition_monogamous = { is_in_list = traits }
					culture_tradition:tradition_polygamous = { is_in_list = traits }
					culture_tradition:tradition_concubines = { is_in_list = traits }
				}
			}
		}
	}
	can_pick_for_hybridization = {
		custom_tooltip = {
			text = only_one_marriage_tradition_allowed
			NOR = { # Only blocks monogamous to avoid duplicate warnings, but is blocked by polygamous
					culture_tradition:tradition_monogamous = { is_in_list = traits }
					culture_tradition:tradition_polygamous = { is_in_list = traits }
					culture_tradition:tradition_concubines = { is_in_list = traits }
			}
		}
	}
	
	parameters = {
		number_of_spouses = 1
		number_of_consorts = 1
		allows_concubinage = yes
		allows_royal_concubine_prestige_penalty_offset = yes
		allows_imperial_concubine_prestige_penalty_offset = yes
	}
	
	cost = {
		prestige = {
			add = {
				value = tradition_double_base_cost
				desc = BASE
				format = "BASE_VALUE_FORMAT"
			}
			if = {
				limit = {
					NOT = {
						scope:character.faith = {
							OR = {
								has_doctrine_parameter = allows_polygamy
								has_doctrine_parameter = allows_concubinage
							}
						}
					}
				}
				add = {
					value = tradition_unfulfilled_criteria_penalty
					desc = cheaper_tradition_from_faith
				}
			}
			
			multiply = tradition_replacement_cost_if_relevant
		}
	}
	
	ai_will_do = { value = 0 }
}


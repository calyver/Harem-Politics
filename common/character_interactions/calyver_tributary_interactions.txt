# Demand Concubine
demand_concubine_interaction = {
	category = interaction_category_vassal
	common_interaction = yes
	icon = request_concubine_interaction
	interface_priority = 44

	desc = demand_concubine_interaction_desc

	ai_targets = {
		ai_recipients = tributaries
		ai_recipients = vassals
	}
	ai_target_quick_trigger = {
		adult = yes
	}
	ai_frequency = 12
	cooldown_against_recipient = { years = 3 }

	greeting = positive
	notification_text = DEMAND_CONCUBINE_NOTIFICATION

	needs_recipient_to_open = yes

	populate_actor_list = {
		scope:recipient = {
			every_courtier = {
				limit = {
					is_physically_able_adult = yes
					is_ruler = no
					could_marry_character_trigger = { CHARACTER = scope:actor }
				}
				add_to_list = characters
			}
		}
	}

	is_shown = {
		scope:actor != scope:recipient
		scope:actor = {
			allowed_concubines = yes
		}
		scope:recipient = {
			OR = {
				trigger_if = {
					limit = {
						scope:actor = {
							government_has_flag = government_is_nomadic
						}
					}
					is_vassal_of = scope:actor
				}
				is_tributary_of = scope:actor
			}
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			allowed_more_concubines = yes
			is_physically_able_adult = yes
		}
		custom_tooltip = {
			text = must_have_valid_concubine_tt
			scope:recipient = {
				any_courtier = {
					is_physically_able_adult = yes
					is_ruler = no
					could_marry_character_trigger = { CHARACTER = scope:actor }
				}
			}
		}
	}

	can_be_picked = {
		is_adult = yes
	}

	can_send = {
	}

	auto_accept = no

	ai_accept = {
		base = 0
		
		modifier = {
			add = 1000
			scope:recipient = {
				is_obedient_to = scope:actor
			}
			desc = AI_OBEDIENT_REASON
		}
		
		modifier = {
			add = 25
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		
		modifier = {
			add = 50
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		
		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 1.0
			desc = AI_OPINION_REASON
		}
		
		modifier = {
			add = -25
			scope:secondary_actor = {
				OR = {
					is_councillor = yes
					has_any_court_position = yes
				}
			}
			desc = AI_EMPLOYED_COURTIER_REASON
		}
		
		modifier = {
			add = -15
			scope:secondary_actor = {
				is_knight = yes
			}
			desc = AI_IS_KNIGHT_REASON
		}
		
		modifier = {
			add = -50
			exists = scope:secondary_actor.inspiration
			desc = AI_INSPIRED_REASON
		}
		
		modifier = {
			add = -25
			scope:secondary_actor = {
				is_close_or_extended_family_of = scope:recipient
			}
			desc = AI_FAMILY_REASON
		}
		
		modifier = {
			add = -50
			scope:secondary_actor = {
				has_relation_friend = scope:recipient
			}
			desc = AI_FRIEND_REASON
		}
		
		modifier = {
			add = -50
			scope:secondary_actor = {
				is_consort_of = scope:recipient
			}
			desc = AI_SPOUSE_REASON
		}
		
		modifier = {
			add = -50
			scope:secondary_actor = {
				is_child_of = scope:recipient
			}
			desc = AI_CHILD_REASON
		}
		
		modifier = {
			add = 1000
			scope:secondary_actor = {
				has_relation_rival = scope:recipient
			}
			desc = AI_RIVAL_REASON
		}
	}

	ai_potential = {
		OR = {
			has_trait = lustful
			ai_honor <= 0
		}
		any_tributary = { }
	}

	ai_will_do = {
		base = 0

		modifier = {
			add = 40
			scope:actor = {
				number_of_concubines < number_of_desired_concubines
			}
		}

		#More/Less likely based on difference in rank between actor and recipient
		modifier = {
			add = 50
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 1
				}
			}
		}
		modifier = {
			add = 25
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 2
				}
			}
		}

		modifier = {
			add = -20
			scope:actor = {
				has_trait = chaste
			}
		}
		modifier = {
			add = -20
			scope:actor = {
				has_trait = forgiving
			}
		}
		modifier = {
			add = -20
			scope:actor = {
				has_trait = compassionate
			}
		}
		
		modifier = {
			add = 100
			scope:secondary_actor = {
				OR = {
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
					has_relation_lover = scope:actor
					has_relation_soulmate = scope:actor
					sum_of_all_skills_value >= sum_of_all_skills_threshold_good
					martial >= monumentally_high_skill_rating
					prowess >= extremely_high_skill_rating
					exists = inspiration
					AND = {
						diplomacy >= monumentally_high_skill_rating
						scope:actor.cp:councillor_chancellor ?= { diplomacy < monumentally_high_skill_rating }
					}
					AND = {
						diplomacy >= monumentally_high_skill_rating
						scope:actor.cp:councillor_steward ?= { stewardship < monumentally_high_skill_rating }
					}
					AND = {
						diplomacy >= monumentally_high_skill_rating
						scope:actor.cp:councillor_spymaster ?= { intrigue < monumentally_high_skill_rating }
					}
					has_conventionally_attractive_trigger = yes
					num_of_good_genetic_traits > 1
				}
			}
		}
		
		modifier = {
			factor = 0
			scope:recipient = {
				OR = {
					has_relation_friend = scope:actor
					has_relation_best_friend = scope:actor
					has_relation_lover = scope:actor
					has_relation_soulmate = scope:actor
				}
			}
		}
		
		modifier = {
			factor = 0
			scope:secondary_actor = {
				OR = {
					has_conventionally_ugly_trigger = yes
					age >= 30
					is_visibly_fertile = no
				}
			}
		}
	}

	on_send = {
		scope:secondary_actor = { # to block the same character from being offered twice
			add_character_flag = {
				flag = has_been_offered_as_concubine
				days = 5
			}
		}
	}
	
	on_accept = {
		scope:recipient = {
			if = {
				limit = {
					scope:secondary_actor = {
						NOR = {
							is_consort_of = scope:recipient
							is_close_or_extended_family_of = scope:recipient
						}
					}
				}
				add_opinion = {
					target = scope:actor
					modifier = upset_opinion
					opinion = -15
				}
			}
			else = {
				scope:secondary_actor = { save_scope_as = relationship_reason_involved_character }
				progress_towards_rival_effect = {
					REASON = rival_demanded_concubine
					CHARACTER = scope:actor
					OPINION = 0
				}
				add_opinion = {
					target = scope:actor
					modifier = upset_opinion
					opinion = -50
				}
				clear_saved_scope = secondary_actor
			}
		}
		calyver_demand_concubine_interaction_on_accept_effect = yes
	}

	on_decline = {
		scope:actor = {
			send_interface_toast = {
				type = event_toast_effect_bad
				title = msg_concubine_demand_rejected_title
				right_icon = scope:recipient
				left_icon = scope:secondary_actor
				custom_tooltip = msg_courtier_demand_rejected
			}
		}
		scope:actor = {
			add_opinion = {
				target = scope:recipient
				modifier = upset_opinion
				opinion = -15
			}
		}
	}
}